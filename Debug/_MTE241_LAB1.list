
_MTE241_LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003460  08003460  00004460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b8  080034b8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080034b8  080034b8  000044b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034c0  080034c0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c0  080034c0  000044c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034c4  080034c4  000044c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080034c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000068  08003530  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08003530  00005334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_line   00009408  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000007e  00000000  00000000  0000e4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00007e1e  00000000  00000000  0000e51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001866  00000000  00000000  0001633c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000760  00000000  00000000  00017ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00086c90  00000000  00000000  00018308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000579  00000000  00000000  0009ef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000165b3  00000000  00000000  0009f511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b5ac4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023ac  00000000  00000000  000b5b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003448 	.word	0x08003448

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003448 	.word	0x08003448

080001e0 <SVC_Handler>:
  .thumb //Practically this only matters to the CPU, but it ensures that the correct types of instructions get included

  .global SVC_Handler //We need to indicate to the linker that this function exists
  .thumb_func //We need to ensure that the address of our interrupt function is properly aligned or we hard fault. a LOT
  SVC_Handler: //our function name
	TST LR, 4 //TeST the 3rd bit in LR (4 is 0b1000, so its 3rd bit is 1)
 80001e0:	f01e 0f04 	tst.w	lr, #4
	ITE EQ //If Then Equal
 80001e4:	bf0c      	ite	eq
	MRSEQ R0, MSP //If the third bit is set, we are using MSP. Set us up to use that
 80001e6:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP //Otherwise, use PSP
 80001ea:	f3ef 8009 	mrsne	r0, PSP
	B SVC_Handler_Main //Go to the C function, because screw assembly
 80001ee:	f000 bb19 	b.w	8000824 <SVC_Handler_Main>

080001f2 <runFirstThread>:

  .global runFirstThread //Running the first thread requires some special consideration, so it is its own function
  .thumb_func
  runFirstThread:
  	//Restore MSP since we have two things on there that won't go away
  	POP {R7}
 80001f2:	bc80      	pop	{r7}
  	POP {R7}
 80001f4:	bc80      	pop	{r7}

  	//Get ready for PSP
  	MRS R0, PSP
 80001f6:	f3ef 8009 	mrs	r0, PSP
  	MOV LR, #0xFFFFFFFD
 80001fa:	f06f 0e02 	mvn.w	lr, #2
  	LDMIA R0!,{R4-R11}
 80001fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  	MSR PSP, R0
 8000202:	f380 8809 	msr	PSP, r0
  	BX LR
 8000206:	4770      	bx	lr

08000208 <PendSV_Handler>:
	//Restore MSP since we have two things on there that won't go away
	//POP {R7}
	//POP {R7}

	//Perform the switch
	MRS R0, PSP
 8000208:	f3ef 8009 	mrs	r0, PSP
	STMDB R0!,{R4-R11}
 800020c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BL osSched
 8000210:	f000 fabc 	bl	800078c <osSched>
	MRS R0, PSP
 8000214:	f3ef 8009 	mrs	r0, PSP
	MOV LR, #0xFFFFFFFD
 8000218:	f06f 0e02 	mvn.w	lr, #2
	LDMIA R0!,{R4-R11}
 800021c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 8000220:	f380 8809 	msr	PSP, r0
	BX LR
 8000224:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <osKernelInitialize>:

thread threads[TOTAL_STACKS];
uint8_t curr_thread;
uint8_t total_threads;

void osKernelInitialize (void) {
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
	msp_init_val = *(uint32_t**)0x0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a1c      	ldr	r2, [pc, #112]	@ (800063c <osKernelInitialize+0x7c>)
 80005cc:	6013      	str	r3, [r2, #0]
	prev_stack = msp_init_val;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <osKernelInitialize+0x7c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <osKernelInitialize+0x80>)
 80005d4:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < TOTAL_STACKS; i++) {
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	e013      	b.n	8000604 <osKernelInitialize+0x44>
		threads[i].sp = NULL;
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	4a19      	ldr	r2, [pc, #100]	@ (8000644 <osKernelInitialize+0x84>)
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	4413      	add	r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
		threads[i].thread_function = NULL;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	4a16      	ldr	r2, [pc, #88]	@ (8000644 <osKernelInitialize+0x84>)
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	4413      	add	r3, r2
 80005f0:	3304      	adds	r3, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
		uint32_t timeslice = 0x0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
		uint32_t runtime = timeslice;
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < TOTAL_STACKS; i++) {
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	3301      	adds	r3, #1
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b0f      	cmp	r3, #15
 8000608:	d9e8      	bls.n	80005dc <osKernelInitialize+0x1c>
	}
	curr_thread = 0;
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <osKernelInitialize+0x88>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	total_threads = 0;
 8000610:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <osKernelInitialize+0x8c>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]

	//set the priority of PendSV to almost the weakest
	SHPR3 |= 0xFE << 16; //shift the constant 0xFE 16 bits to set PendSV priority
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <osKernelInitialize+0x90>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0d      	ldr	r2, [pc, #52]	@ (8000650 <osKernelInitialize+0x90>)
 800061c:	f443 037e 	orr.w	r3, r3, #16646144	@ 0xfe0000
 8000620:	6013      	str	r3, [r2, #0]
	SHPR2 |= 0xFDU << 24; //Set the priority of SVC higher than PendSV
 8000622:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <osKernelInitialize+0x94>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a0b      	ldr	r2, [pc, #44]	@ (8000654 <osKernelInitialize+0x94>)
 8000628:	f043 437d 	orr.w	r3, r3, #4244635648	@ 0xfd000000
 800062c:	6013      	str	r3, [r2, #0]
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000088 	.word	0x20000088
 8000640:	20000084 	.word	0x20000084
 8000644:	2000008c 	.word	0x2000008c
 8000648:	2000018c 	.word	0x2000018c
 800064c:	2000018d 	.word	0x2000018d
 8000650:	e000ed20 	.word	0xe000ed20
 8000654:	e000ed1c 	.word	0xe000ed1c

08000658 <osAllocateStack>:

uint32_t* osAllocateStack(void) {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
	uint32_t* new_stack = prev_stack - STACK_SIZE;
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <osAllocateStack+0x38>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8000666:	607b      	str	r3, [r7, #4]
	if((uint32_t)msp_init_val - (uint32_t)new_stack > TOTAL_STACK_SIZE) {
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <osAllocateStack+0x3c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000676:	d901      	bls.n	800067c <osAllocateStack+0x24>
		return NULL;
 8000678:	2300      	movs	r3, #0
 800067a:	e003      	b.n	8000684 <osAllocateStack+0x2c>
	}
	prev_stack = new_stack;
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <osAllocateStack+0x38>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6013      	str	r3, [r2, #0]
	return new_stack;
 8000682:	687b      	ldr	r3, [r7, #4]
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000084 	.word	0x20000084
 8000694:	20000088 	.word	0x20000088

08000698 <osCreateThread>:

bool osCreateThread (void (*thread_function)(void* args), void* args) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	return osCreateThreadWithDeadline ((void*)thread_function, args, DEFAULT_TIMEOUT_MS);
 80006a2:	2205      	movs	r2, #5
 80006a4:	6839      	ldr	r1, [r7, #0]
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f806 	bl	80006b8 <osCreateThreadWithDeadline>
 80006ac:	4603      	mov	r3, r0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <osCreateThreadWithDeadline>:

bool osCreateThreadWithDeadline (void (*thread_function)(void* args), void* args, uint32_t deadline) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	uint32_t* stackptr = osAllocateStack();
 80006c4:	f7ff ffc8 	bl	8000658 <osAllocateStack>
 80006c8:	6178      	str	r0, [r7, #20]
	if(stackptr == NULL) {
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <osCreateThreadWithDeadline+0x1c>
		return false;
 80006d0:	2300      	movs	r3, #0
 80006d2:	e04b      	b.n	800076c <osCreateThreadWithDeadline+0xb4>
	}

	*(--stackptr) = 1 << 24; //xPSR
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3b04      	subs	r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80006e0:	601a      	str	r2, [r3, #0]
	*(--stackptr) = (uint32_t)thread_function; //PC
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	3b04      	subs	r3, #4
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	601a      	str	r2, [r3, #0]
	for (uint8_t  i = 0; i < 14; i++) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	74fb      	strb	r3, [r7, #19]
 80006f2:	e012      	b.n	800071a <osCreateThreadWithDeadline+0x62>
		if(i == 5){ //R0
 80006f4:	7cfb      	ldrb	r3, [r7, #19]
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d106      	bne.n	8000708 <osCreateThreadWithDeadline+0x50>
			*(--stackptr) = args;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3b04      	subs	r3, #4
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	e005      	b.n	8000714 <osCreateThreadWithDeadline+0x5c>
		} else {
			*(--stackptr) = 0xA;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3b04      	subs	r3, #4
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	220a      	movs	r2, #10
 8000712:	601a      	str	r2, [r3, #0]
	for (uint8_t  i = 0; i < 14; i++) {
 8000714:	7cfb      	ldrb	r3, [r7, #19]
 8000716:	3301      	adds	r3, #1
 8000718:	74fb      	strb	r3, [r7, #19]
 800071a:	7cfb      	ldrb	r3, [r7, #19]
 800071c:	2b0d      	cmp	r3, #13
 800071e:	d9e9      	bls.n	80006f4 <osCreateThreadWithDeadline+0x3c>
		}
	}

	threads[total_threads].sp = stackptr;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <osCreateThreadWithDeadline+0xbc>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4a14      	ldr	r2, [pc, #80]	@ (8000778 <osCreateThreadWithDeadline+0xc0>)
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	4413      	add	r3, r2
 800072a:	697a      	ldr	r2, [r7, #20]
 800072c:	601a      	str	r2, [r3, #0]
	threads[total_threads].thread_function = thread_function;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <osCreateThreadWithDeadline+0xbc>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4a11      	ldr	r2, [pc, #68]	@ (8000778 <osCreateThreadWithDeadline+0xc0>)
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	4413      	add	r3, r2
 8000738:	3304      	adds	r3, #4
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	601a      	str	r2, [r3, #0]

	threads[total_threads].timeslice = deadline;
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <osCreateThreadWithDeadline+0xbc>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4a0d      	ldr	r2, [pc, #52]	@ (8000778 <osCreateThreadWithDeadline+0xc0>)
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	4413      	add	r3, r2
 8000748:	3308      	adds	r3, #8
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	601a      	str	r2, [r3, #0]
	threads[total_threads].runtime = deadline;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <osCreateThreadWithDeadline+0xbc>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4a09      	ldr	r2, [pc, #36]	@ (8000778 <osCreateThreadWithDeadline+0xc0>)
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	4413      	add	r3, r2
 8000758:	330c      	adds	r3, #12
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	601a      	str	r2, [r3, #0]
	total_threads++;
 800075e:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <osCreateThreadWithDeadline+0xbc>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <osCreateThreadWithDeadline+0xbc>)
 8000768:	701a      	strb	r2, [r3, #0]

	return true;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000018d 	.word	0x2000018d
 8000778:	2000008c 	.word	0x2000008c

0800077c <osKernelStart>:

void osKernelStart (void) {
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	__asm("SVC #1");
 8000780:	df01      	svc	1
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <osSched>:

void osSched(void){
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
	threads[curr_thread].runtime = threads[curr_thread].timeslice;
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <osSched+0x7c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4619      	mov	r1, r3
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <osSched+0x7c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	4a1b      	ldr	r2, [pc, #108]	@ (800080c <osSched+0x80>)
 80007a0:	010b      	lsls	r3, r1, #4
 80007a2:	4413      	add	r3, r2
 80007a4:	3308      	adds	r3, #8
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4918      	ldr	r1, [pc, #96]	@ (800080c <osSched+0x80>)
 80007aa:	0103      	lsls	r3, r0, #4
 80007ac:	440b      	add	r3, r1
 80007ae:	330c      	adds	r3, #12
 80007b0:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80007b2:	f3ef 8309 	mrs	r3, PSP
 80007b6:	603b      	str	r3, [r7, #0]
  return(result);
 80007b8:	683b      	ldr	r3, [r7, #0]
	threads[curr_thread].sp = (uint32_t*)(__get_PSP() - 8*4);
 80007ba:	f1a3 0220 	sub.w	r2, r3, #32
 80007be:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <osSched+0x7c>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4a11      	ldr	r2, [pc, #68]	@ (800080c <osSched+0x80>)
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	4413      	add	r3, r2
 80007ca:	6019      	str	r1, [r3, #0]
	curr_thread = (curr_thread + 1) % total_threads;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <osSched+0x7c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000810 <osSched+0x84>)
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80007da:	fb01 f202 	mul.w	r2, r1, r2
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <osSched+0x7c>)
 80007e4:	701a      	strb	r2, [r3, #0]
	__set_PSP((uint32_t)threads[curr_thread].sp);
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <osSched+0x7c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4a08      	ldr	r2, [pc, #32]	@ (800080c <osSched+0x80>)
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	4413      	add	r3, r2
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f383 8809 	msr	PSP, r3
}
 80007fa:	bf00      	nop
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	2000018c 	.word	0x2000018c
 800080c:	2000008c 	.word	0x2000008c
 8000810:	2000018d 	.word	0x2000018d

08000814 <osYield>:

void osYield(void) {
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
	__asm("SVC #2");
 8000818:	df02      	svc	2
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SVC_Handler_Main>:

void SVC_Handler_Main(unsigned int *svc_args)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	/*
	* Stack contains:
	* r0, r1, r2, r3, r12, r14, the return address and xPSR
	* First argument (r0) is svc_args[0]
	*/
	svc_number = ( ( char * )svc_args[ 6 ] )[ -2 ] ;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3318      	adds	r3, #24
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3b02      	subs	r3, #2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	60fb      	str	r3, [r7, #12]
	switch( svc_number )
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d003      	beq.n	8000846 <SVC_Handler_Main+0x22>
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2b02      	cmp	r3, #2
 8000842:	d00d      	beq.n	8000860 <SVC_Handler_Main+0x3c>
			runFirstThread();
		case 2:
			_ICSR |= 1 << 28;
			__asm("isb");
		default: /* unknown SVC */
			break;
 8000844:	e014      	b.n	8000870 <SVC_Handler_Main+0x4c>
			__set_PSP((uint32_t)threads[curr_thread].sp);
 8000846:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <SVC_Handler_Main+0x58>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <SVC_Handler_Main+0x5c>)
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	4413      	add	r3, r2
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	f383 8809 	msr	PSP, r3
}
 800085a:	bf00      	nop
			runFirstThread();
 800085c:	f7ff fcc9 	bl	80001f2 <runFirstThread>
			_ICSR |= 1 << 28;
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <SVC_Handler_Main+0x60>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a07      	ldr	r2, [pc, #28]	@ (8000884 <SVC_Handler_Main+0x60>)
 8000866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086a:	6013      	str	r3, [r2, #0]
			__asm("isb");
 800086c:	f3bf 8f6f 	isb	sy
			break;
 8000870:	bf00      	nop
	}
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000018c 	.word	0x2000018c
 8000880:	2000008c 	.word	0x2000008c
 8000884:	e000ed04 	.word	0xe000ed04

08000888 <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,HAL_MAX_DELAY);
 8000890:	1d39      	adds	r1, r7, #4
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	2201      	movs	r2, #1
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <__io_putchar+0x20>)
 800089a:	f001 fae9 	bl	8001e70 <HAL_UART_Transmit>
	return ch;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000190 	.word	0x20000190

080008ac <first_function>:
typedef struct operators_t {
	uint8_t adder;
	uint8_t multiplier;
} operators;

void first_function(void* args) {
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	while (1) {
		if (changed == false) {
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <first_function+0x48>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	f083 0301 	eor.w	r3, r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f8      	beq.n	80008b4 <first_function+0x8>
			operators input = *(operators*) args;
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	8812      	ldrh	r2, [r2, #0]
 80008ca:	801a      	strh	r2, [r3, #0]
			value += input.adder;
 80008cc:	7b3b      	ldrb	r3, [r7, #12]
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <first_function+0x4c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a08      	ldr	r2, [pc, #32]	@ (80008f8 <first_function+0x4c>)
 80008d8:	6013      	str	r3, [r2, #0]
			value *= input.multiplier;
 80008da:	7b7b      	ldrb	r3, [r7, #13]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <first_function+0x4c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	fb02 f303 	mul.w	r3, r2, r3
 80008e6:	4a04      	ldr	r2, [pc, #16]	@ (80008f8 <first_function+0x4c>)
 80008e8:	6013      	str	r3, [r2, #0]
			changed = true;
 80008ea:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <first_function+0x48>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
		if (changed == false) {
 80008f0:	e7e0      	b.n	80008b4 <first_function+0x8>
 80008f2:	bf00      	nop
 80008f4:	200001dc 	.word	0x200001dc
 80008f8:	200001d8 	.word	0x200001d8

080008fc <second_function>:
		}
	}

}

void second_function(void* args) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	while (1) {
		printf("%d \r\n", value);
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <second_function+0x24>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	@ (8000924 <second_function+0x28>)
 800090c:	f001 ff2e 	bl	800276c <iprintf>
		changed = false;
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <second_function+0x2c>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
		osYield();
 8000916:	f7ff ff7d 	bl	8000814 <osYield>
		printf("%d \r\n", value);
 800091a:	bf00      	nop
 800091c:	e7f2      	b.n	8000904 <second_function+0x8>
 800091e:	bf00      	nop
 8000920:	200001d8 	.word	0x200001d8
 8000924:	08003460 	.word	0x08003460
 8000928:	200001dc 	.word	0x200001dc

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000932:	f000 fabf 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000936:	f000 f81d 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093a:	f000 f8b1 	bl	8000aa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800093e:	f000 f885 	bl	8000a4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  operators struct_arg = {
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <main+0x3c>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	80bb      	strh	r3, [r7, #4]
  		.adder = 1,
  		.multiplier = 2
  };

  osKernelInitialize();
 8000948:	f7ff fe3a 	bl	80005c0 <osKernelInitialize>
  osCreateThread(second_function, 0);
 800094c:	2100      	movs	r1, #0
 800094e:	4807      	ldr	r0, [pc, #28]	@ (800096c <main+0x40>)
 8000950:	f7ff fea2 	bl	8000698 <osCreateThread>
  osCreateThreadWithDeadline(first_function, &struct_arg, 200);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	22c8      	movs	r2, #200	@ 0xc8
 8000958:	4619      	mov	r1, r3
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <main+0x44>)
 800095c:	f7ff feac 	bl	80006b8 <osCreateThreadWithDeadline>
  osKernelStart();
 8000960:	f7ff ff0c 	bl	800077c <osKernelStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <main+0x38>
 8000968:	08003468 	.word	0x08003468
 800096c:	080008fd 	.word	0x080008fd
 8000970:	080008ad 	.word	0x080008ad

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	@ 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	@ 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f001 ff47 	bl	8002816 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <SystemClock_Config+0xd0>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a0:	4a28      	ldr	r2, [pc, #160]	@ (8000a44 <SystemClock_Config+0xd0>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a8:	4b26      	ldr	r3, [pc, #152]	@ (8000a44 <SystemClock_Config+0xd0>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	4b23      	ldr	r3, [pc, #140]	@ (8000a48 <SystemClock_Config+0xd4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009c0:	4a21      	ldr	r2, [pc, #132]	@ (8000a48 <SystemClock_Config+0xd4>)
 80009c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <SystemClock_Config+0xd4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d4:	2302      	movs	r3, #2
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d8:	2301      	movs	r3, #1
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009dc:	2310      	movs	r3, #16
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009e8:	2310      	movs	r3, #16
 80009ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009f2:	2304      	movs	r3, #4
 80009f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009f6:	2307      	movs	r3, #7
 80009f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fd4e 	bl	80014a0 <HAL_RCC_OscConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a0a:	f000 f8b7 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	230f      	movs	r3, #15
 8000a10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	2302      	movs	r3, #2
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 ffb0 	bl	8001990 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a36:	f000 f8a1 	bl	8000b7c <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	@ 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <MX_USART2_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f001 f9a4 	bl	8001dd0 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f875 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000190 	.word	0x20000190
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b2d      	ldr	r3, [pc, #180]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a2c      	ldr	r2, [pc, #176]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a25      	ldr	r2, [pc, #148]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b23      	ldr	r3, [pc, #140]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a17      	ldr	r2, [pc, #92]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4812      	ldr	r0, [pc, #72]	@ (8000b74 <MX_GPIO_Init+0xd4>)
 8000b2c:	f000 fc9e 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b36:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <MX_GPIO_Init+0xd8>)
 8000b48:	f000 fb0c 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <MX_GPIO_Init+0xd4>)
 8000b64:	f000 fafe 	bl	8001164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	@ 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020800 	.word	0x40020800

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <Error_Handler+0x8>

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc6:	2007      	movs	r0, #7
 8000bc8:	f000 fa98 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	@ (8000c5c <HAL_UART_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12b      	bne.n	8000c52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <HAL_UART_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a17      	ldr	r2, [pc, #92]	@ (8000c60 <HAL_UART_MspInit+0x88>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_UART_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <HAL_UART_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <HAL_UART_MspInit+0x88>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c32:	230c      	movs	r3, #12
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c42:	2307      	movs	r3, #7
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c4e:	f000 fa89 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	@ 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40004400 	.word	0x40004400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <NMI_Handler+0x4>

08000c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <MemManage_Handler+0x4>

08000c80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f958 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  threads[curr_thread].runtime--;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <SysTick_Handler+0x48>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	490f      	ldr	r1, [pc, #60]	@ (8000cec <SysTick_Handler+0x4c>)
 8000cae:	011a      	lsls	r2, r3, #4
 8000cb0:	440a      	add	r2, r1
 8000cb2:	320c      	adds	r2, #12
 8000cb4:	6812      	ldr	r2, [r2, #0]
 8000cb6:	3a01      	subs	r2, #1
 8000cb8:	490c      	ldr	r1, [pc, #48]	@ (8000cec <SysTick_Handler+0x4c>)
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	440b      	add	r3, r1
 8000cbe:	330c      	adds	r3, #12
 8000cc0:	601a      	str	r2, [r3, #0]
  if (threads[curr_thread].runtime == 0) {
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <SysTick_Handler+0x48>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <SysTick_Handler+0x4c>)
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	330c      	adds	r3, #12
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d107      	bne.n	8000ce4 <SysTick_Handler+0x44>
	  _ICSR |= 1 << 28;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <SysTick_Handler+0x50>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <SysTick_Handler+0x50>)
 8000cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	6013      	str	r3, [r2, #0]
	  __asm("isb");
 8000ce0:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000018c 	.word	0x2000018c
 8000cec:	2000008c 	.word	0x2000008c
 8000cf0:	e000ed04 	.word	0xe000ed04

08000cf4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e00a      	b.n	8000d1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d06:	f3af 8000 	nop.w
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	b2ca      	uxtb	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dbf0      	blt.n	8000d06 <_read+0x12>
  }

  return len;
 8000d24:	687b      	ldr	r3, [r7, #4]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e009      	b.n	8000d54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fd9d 	bl	8000888 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf1      	blt.n	8000d40 <_write+0x12>
  }
  return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_close>:

int _close(int file)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <_isatty>:

int _isatty(int file)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	@ (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	@ (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f001 fd58 	bl	80028b4 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20018000 	.word	0x20018000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	200001e0 	.word	0x200001e0
 8000e38:	20000338 	.word	0x20000338

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e64:	f7ff ffea 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	@ (8000ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	@ (8000eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f001 fd17 	bl	80028c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fd4b 	bl	800092c <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ea4:	080034c8 	.word	0x080034c8
  ldr r2, =_sbss
 8000ea8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000eac:	20000334 	.word	0x20000334

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <HAL_Init+0x40>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_Init+0x40>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f90d 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f808 	bl	8000ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fe4e 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <HAL_InitTick+0x54>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_InitTick+0x58>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f917 	bl	800114a <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 f8ed 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <HAL_InitTick+0x5c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	200001e4 	.word	0x200001e4

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200001e4 	.word	0x200001e4

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	@ (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	@ (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff47 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff5c 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff8e 	bl	8001050 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffb0 	bl	80010b8 <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	@ 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	e159      	b.n	8001434 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 8148 	bne.w	800142e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d005      	beq.n	80011b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d130      	bne.n	8001218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b03      	cmp	r3, #3
 8001222:	d017      	beq.n	8001254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d123      	bne.n	80012a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	220f      	movs	r2, #15
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	08da      	lsrs	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3208      	adds	r2, #8
 80012a2:	69b9      	ldr	r1, [r7, #24]
 80012a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0203 	and.w	r2, r3, #3
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a2 	beq.w	800142e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b57      	ldr	r3, [pc, #348]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a56      	ldr	r2, [pc, #344]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b54      	ldr	r3, [pc, #336]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001306:	4a52      	ldr	r2, [pc, #328]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a49      	ldr	r2, [pc, #292]	@ (8001454 <HAL_GPIO_Init+0x2f0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x202>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a48      	ldr	r2, [pc, #288]	@ (8001458 <HAL_GPIO_Init+0x2f4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x1fe>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a47      	ldr	r2, [pc, #284]	@ (800145c <HAL_GPIO_Init+0x2f8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x1fa>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a46      	ldr	r2, [pc, #280]	@ (8001460 <HAL_GPIO_Init+0x2fc>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x1f6>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a45      	ldr	r2, [pc, #276]	@ (8001464 <HAL_GPIO_Init+0x300>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x1f2>
 8001352:	2304      	movs	r3, #4
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001356:	2307      	movs	r3, #7
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x204>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x204>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001366:	2300      	movs	r3, #0
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001378:	4935      	ldr	r1, [pc, #212]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001386:	4b38      	ldr	r3, [pc, #224]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d4:	4a24      	ldr	r2, [pc, #144]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013da:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001428:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <HAL_GPIO_Init+0x304>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	f67f aea2 	bls.w	8001180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40013800 	.word	0x40013800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40020800 	.word	0x40020800
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40013c00 	.word	0x40013c00

0800146c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800147c:	787b      	ldrb	r3, [r7, #1]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001488:	e003      	b.n	8001492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	041a      	lsls	r2, r3, #16
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	619a      	str	r2, [r3, #24]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e267      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d075      	beq.n	80015aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014be:	4b88      	ldr	r3, [pc, #544]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d00c      	beq.n	80014e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ca:	4b85      	ldr	r3, [pc, #532]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d112      	bne.n	80014fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d6:	4b82      	ldr	r3, [pc, #520]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014e2:	d10b      	bne.n	80014fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	4b7e      	ldr	r3, [pc, #504]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d05b      	beq.n	80015a8 <HAL_RCC_OscConfig+0x108>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d157      	bne.n	80015a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e242      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001504:	d106      	bne.n	8001514 <HAL_RCC_OscConfig+0x74>
 8001506:	4b76      	ldr	r3, [pc, #472]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a75      	ldr	r2, [pc, #468]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e01d      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x98>
 800151e:	4b70      	ldr	r3, [pc, #448]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6f      	ldr	r2, [pc, #444]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b6d      	ldr	r3, [pc, #436]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6c      	ldr	r2, [pc, #432]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001538:	4b69      	ldr	r3, [pc, #420]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a68      	ldr	r2, [pc, #416]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b66      	ldr	r3, [pc, #408]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a65      	ldr	r2, [pc, #404]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fd12 	bl	8000f80 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fd0e 	bl	8000f80 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e207      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b5b      	ldr	r3, [pc, #364]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0xc0>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fcfe 	bl	8000f80 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fcfa 	bl	8000f80 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1f3      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	4b51      	ldr	r3, [pc, #324]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0xe8>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d063      	beq.n	800167e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015b6:	4b4a      	ldr	r3, [pc, #296]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c2:	4b47      	ldr	r3, [pc, #284]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d11c      	bne.n	8001608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ce:	4b44      	ldr	r3, [pc, #272]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d116      	bne.n	8001608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	4b41      	ldr	r3, [pc, #260]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x152>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e1c7      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b3b      	ldr	r3, [pc, #236]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4937      	ldr	r1, [pc, #220]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	e03a      	b.n	800167e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001610:	4b34      	ldr	r3, [pc, #208]	@ (80016e4 <HAL_RCC_OscConfig+0x244>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff fcb3 	bl	8000f80 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161e:	f7ff fcaf 	bl	8000f80 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1a8      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	4b2b      	ldr	r3, [pc, #172]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163c:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4925      	ldr	r1, [pc, #148]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001652:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <HAL_RCC_OscConfig+0x244>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fc92 	bl	8000f80 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff fc8e 	bl	8000f80 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e187      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d036      	beq.n	80016f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d016      	beq.n	80016c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_RCC_OscConfig+0x248>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fc72 	bl	8000f80 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fc6e 	bl	8000f80 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e167      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80016b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x200>
 80016be:	e01b      	b.n	80016f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HAL_RCC_OscConfig+0x248>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fc5b 	bl	8000f80 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	e00e      	b.n	80016ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fc57 	bl	8000f80 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d907      	bls.n	80016ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e150      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
 80016e0:	40023800 	.word	0x40023800
 80016e4:	42470000 	.word	0x42470000
 80016e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ec:	4b88      	ldr	r3, [pc, #544]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80016ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ea      	bne.n	80016ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8097 	beq.w	8001834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170a:	4b81      	ldr	r3, [pc, #516]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10f      	bne.n	8001736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b7d      	ldr	r3, [pc, #500]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	4a7c      	ldr	r2, [pc, #496]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	@ 0x40
 8001726:	4b7a      	ldr	r3, [pc, #488]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001732:	2301      	movs	r3, #1
 8001734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	4b77      	ldr	r3, [pc, #476]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173e:	2b00      	cmp	r3, #0
 8001740:	d118      	bne.n	8001774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001742:	4b74      	ldr	r3, [pc, #464]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a73      	ldr	r2, [pc, #460]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 8001748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174e:	f7ff fc17 	bl	8000f80 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001756:	f7ff fc13 	bl	8000f80 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e10c      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	4b6a      	ldr	r3, [pc, #424]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x2ea>
 800177c:	4b64      	ldr	r3, [pc, #400]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001780:	4a63      	ldr	r2, [pc, #396]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	@ 0x70
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x324>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x30c>
 8001792:	4b5f      	ldr	r3, [pc, #380]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001796:	4a5e      	ldr	r2, [pc, #376]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6713      	str	r3, [r2, #112]	@ 0x70
 800179e:	4b5c      	ldr	r3, [pc, #368]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0x324>
 80017ac:	4b58      	ldr	r3, [pc, #352]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b0:	4a57      	ldr	r2, [pc, #348]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b8:	4b55      	ldr	r3, [pc, #340]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017bc:	4a54      	ldr	r2, [pc, #336]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 0304 	bic.w	r3, r3, #4
 80017c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d015      	beq.n	80017f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fbd8 	bl	8000f80 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fbd4 	bl	8000f80 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0cb      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ea:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0ee      	beq.n	80017d4 <HAL_RCC_OscConfig+0x334>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fbc2 	bl	8000f80 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001800:	f7ff fbbe 	bl	8000f80 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0b5      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001816:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ee      	bne.n	8001800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4b39      	ldr	r3, [pc, #228]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	4a38      	ldr	r2, [pc, #224]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800182e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001832:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80a1 	beq.w	8001980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800183e:	4b34      	ldr	r3, [pc, #208]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d05c      	beq.n	8001904 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d141      	bne.n	80018d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <HAL_RCC_OscConfig+0x478>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fb92 	bl	8000f80 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fb8e 	bl	8000f80 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e087      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	3b01      	subs	r3, #1
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	491b      	ldr	r1, [pc, #108]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <HAL_RCC_OscConfig+0x478>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fb67 	bl	8000f80 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff fb63 	bl	8000f80 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e05c      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x416>
 80018d4:	e054      	b.n	8001980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <HAL_RCC_OscConfig+0x478>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb50 	bl	8000f80 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fb4c 	bl	8000f80 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e045      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x444>
 8001902:	e03d      	b.n	8001980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d107      	bne.n	800191c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e038      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
 8001910:	40023800 	.word	0x40023800
 8001914:	40007000 	.word	0x40007000
 8001918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_RCC_OscConfig+0x4ec>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d028      	beq.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d121      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d11a      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001954:	4293      	cmp	r3, r2
 8001956:	d111      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	3b01      	subs	r3, #1
 8001966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0cc      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a4:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d90c      	bls.n	80019cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b65      	ldr	r3, [pc, #404]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b63      	ldr	r3, [pc, #396]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0b8      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e4:	4b59      	ldr	r3, [pc, #356]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a58      	ldr	r2, [pc, #352]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019fc:	4b53      	ldr	r3, [pc, #332]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a52      	ldr	r2, [pc, #328]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b50      	ldr	r3, [pc, #320]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	494d      	ldr	r1, [pc, #308]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d044      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d119      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e07f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e06f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e067      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f023 0203 	bic.w	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4934      	ldr	r1, [pc, #208]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a80:	f7ff fa7e 	bl	8000f80 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff fa7a 	bl	8000f80 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e04f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 020c 	and.w	r2, r3, #12
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1eb      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b25      	ldr	r3, [pc, #148]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d20c      	bcs.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b20      	ldr	r3, [pc, #128]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e032      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4916      	ldr	r1, [pc, #88]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b02:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	490e      	ldr	r1, [pc, #56]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b16:	f000 f821 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	490a      	ldr	r1, [pc, #40]	@ (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	5ccb      	ldrb	r3, [r1, r3]
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	4a09      	ldr	r2, [pc, #36]	@ (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f9de 	bl	8000ef8 <HAL_InitTick>

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	0800346c 	.word	0x0800346c
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b60:	b094      	sub	sp, #80	@ 0x50
 8001b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b68:	2300      	movs	r3, #0
 8001b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b74:	4b79      	ldr	r3, [pc, #484]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d00d      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x40>
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	f200 80e1 	bhi.w	8001d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x34>
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d003      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b8e:	e0db      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b73      	ldr	r3, [pc, #460]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b92:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001b94:	e0db      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b96:	4b73      	ldr	r3, [pc, #460]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b9a:	e0d8      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ba4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d063      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	099b      	lsrs	r3, r3, #6
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bce:	4622      	mov	r2, r4
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	0159      	lsls	r1, r3, #5
 8001bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be0:	0150      	lsls	r0, r2, #5
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4621      	mov	r1, r4
 8001be8:	1a51      	subs	r1, r2, r1
 8001bea:	6139      	str	r1, [r7, #16]
 8001bec:	4629      	mov	r1, r5
 8001bee:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c00:	4659      	mov	r1, fp
 8001c02:	018b      	lsls	r3, r1, #6
 8001c04:	4651      	mov	r1, sl
 8001c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c0a:	4651      	mov	r1, sl
 8001c0c:	018a      	lsls	r2, r1, #6
 8001c0e:	4651      	mov	r1, sl
 8001c10:	ebb2 0801 	subs.w	r8, r2, r1
 8001c14:	4659      	mov	r1, fp
 8001c16:	eb63 0901 	sbc.w	r9, r3, r1
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c2e:	4690      	mov	r8, r2
 8001c30:	4699      	mov	r9, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	eb18 0303 	adds.w	r3, r8, r3
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	462b      	mov	r3, r5
 8001c3c:	eb49 0303 	adc.w	r3, r9, r3
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c4e:	4629      	mov	r1, r5
 8001c50:	024b      	lsls	r3, r1, #9
 8001c52:	4621      	mov	r1, r4
 8001c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c58:	4621      	mov	r1, r4
 8001c5a:	024a      	lsls	r2, r1, #9
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c62:	2200      	movs	r2, #0
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c6c:	f7fe fb30 	bl	80002d0 <__aeabi_uldivmod>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4613      	mov	r3, r2
 8001c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c78:	e058      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7a:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	2200      	movs	r2, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	4611      	mov	r1, r2
 8001c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c94:	4642      	mov	r2, r8
 8001c96:	464b      	mov	r3, r9
 8001c98:	f04f 0000 	mov.w	r0, #0
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	0159      	lsls	r1, r3, #5
 8001ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca6:	0150      	lsls	r0, r2, #5
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4641      	mov	r1, r8
 8001cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	00eb      	lsls	r3, r5, #3
 8001cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce2:	00e2      	lsls	r2, r4, #3
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	4643      	mov	r3, r8
 8001cea:	18e3      	adds	r3, r4, r3
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	464b      	mov	r3, r9
 8001cf0:	eb45 0303 	adc.w	r3, r5, r3
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d02:	4629      	mov	r1, r5
 8001d04:	028b      	lsls	r3, r1, #10
 8001d06:	4621      	mov	r1, r4
 8001d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	028a      	lsls	r2, r1, #10
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d16:	2200      	movs	r2, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	61fa      	str	r2, [r7, #28]
 8001d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d20:	f7fe fad6 	bl	80002d0 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	3301      	adds	r3, #1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001d3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3750      	adds	r7, #80	@ 0x50
 8001d54:	46bd      	mov	sp, r7
 8001d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	007a1200 	.word	0x007a1200

08001d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000000 	.word	0x20000000

08001d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d84:	f7ff fff0 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0a9b      	lsrs	r3, r3, #10
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4903      	ldr	r1, [pc, #12]	@ (8001da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	0800347c 	.word	0x0800347c

08001da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dac:	f7ff ffdc 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0b5b      	lsrs	r3, r3, #13
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	4903      	ldr	r1, [pc, #12]	@ (8001dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	0800347c 	.word	0x0800347c

08001dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e042      	b.n	8001e68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe feee 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2224      	movs	r2, #36	@ 0x24
 8001e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f973 	bl	8002100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d175      	bne.n	8001f7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_UART_Transmit+0x2c>
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e06e      	b.n	8001f7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2221      	movs	r2, #33	@ 0x21
 8001eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eae:	f7ff f867 	bl	8000f80 <HAL_GetTick>
 8001eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	88fa      	ldrh	r2, [r7, #6]
 8001ebe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ec8:	d108      	bne.n	8001edc <HAL_UART_Transmit+0x6c>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d104      	bne.n	8001edc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	e003      	b.n	8001ee4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ee4:	e02e      	b.n	8001f44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2200      	movs	r2, #0
 8001eee:	2180      	movs	r1, #128	@ 0x80
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f848 	bl	8001f86 <UART_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e03a      	b.n	8001f7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10b      	bne.n	8001f26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	3302      	adds	r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	e007      	b.n	8001f36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	3301      	adds	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1cb      	bne.n	8001ee6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2200      	movs	r2, #0
 8001f56:	2140      	movs	r1, #64	@ 0x40
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f814 	bl	8001f86 <UART_WaitOnFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e006      	b.n	8001f7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e000      	b.n	8001f7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f7c:	2302      	movs	r3, #2
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3720      	adds	r7, #32
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4613      	mov	r3, r2
 8001f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f96:	e03b      	b.n	8002010 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9e:	d037      	beq.n	8002010 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa0:	f7fe ffee 	bl	8000f80 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	6a3a      	ldr	r2, [r7, #32]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d302      	bcc.n	8001fb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e03a      	b.n	8002030 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d023      	beq.n	8002010 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b80      	cmp	r3, #128	@ 0x80
 8001fcc:	d020      	beq.n	8002010 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b40      	cmp	r3, #64	@ 0x40
 8001fd2:	d01d      	beq.n	8002010 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d116      	bne.n	8002010 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f81d 	bl	8002038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2208      	movs	r2, #8
 8002002:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e00f      	b.n	8002030 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4013      	ands	r3, r2
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	429a      	cmp	r2, r3
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	429a      	cmp	r2, r3
 800202c:	d0b4      	beq.n	8001f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002038:	b480      	push	{r7}
 800203a:	b095      	sub	sp, #84	@ 0x54
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	330c      	adds	r3, #12
 8002046:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800204a:	e853 3f00 	ldrex	r3, [r3]
 800204e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	330c      	adds	r3, #12
 800205e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002060:	643a      	str	r2, [r7, #64]	@ 0x40
 8002062:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002064:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002068:	e841 2300 	strex	r3, r2, [r1]
 800206c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800206e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e5      	bne.n	8002040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3314      	adds	r3, #20
 800207a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	e853 3f00 	ldrex	r3, [r3]
 8002082:	61fb      	str	r3, [r7, #28]
   return(result);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3314      	adds	r3, #20
 8002092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002094:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002098:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800209a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800209c:	e841 2300 	strex	r3, r2, [r1]
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e5      	bne.n	8002074 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d119      	bne.n	80020e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	330c      	adds	r3, #12
 80020b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	e853 3f00 	ldrex	r3, [r3]
 80020be:	60bb      	str	r3, [r7, #8]
   return(result);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f023 0310 	bic.w	r3, r3, #16
 80020c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	330c      	adds	r3, #12
 80020ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020d0:	61ba      	str	r2, [r7, #24]
 80020d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d4:	6979      	ldr	r1, [r7, #20]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	e841 2300 	strex	r3, r2, [r1]
 80020dc:	613b      	str	r3, [r7, #16]
   return(result);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e5      	bne.n	80020b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020f2:	bf00      	nop
 80020f4:	3754      	adds	r7, #84	@ 0x54
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002104:	b0c0      	sub	sp, #256	@ 0x100
 8002106:	af00      	add	r7, sp, #0
 8002108:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800211c:	68d9      	ldr	r1, [r3, #12]
 800211e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	ea40 0301 	orr.w	r3, r0, r1
 8002128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800212a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	431a      	orrs	r2, r3
 8002138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	431a      	orrs	r2, r3
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002158:	f021 010c 	bic.w	r1, r1, #12
 800215c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002166:	430b      	orrs	r3, r1
 8002168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800216a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800217a:	6999      	ldr	r1, [r3, #24]
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	ea40 0301 	orr.w	r3, r0, r1
 8002186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b8f      	ldr	r3, [pc, #572]	@ (80023cc <UART_SetConfig+0x2cc>)
 8002190:	429a      	cmp	r2, r3
 8002192:	d005      	beq.n	80021a0 <UART_SetConfig+0xa0>
 8002194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b8d      	ldr	r3, [pc, #564]	@ (80023d0 <UART_SetConfig+0x2d0>)
 800219c:	429a      	cmp	r2, r3
 800219e:	d104      	bne.n	80021aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021a0:	f7ff fe02 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 80021a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80021a8:	e003      	b.n	80021b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021aa:	f7ff fde9 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 80021ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021bc:	f040 810c 	bne.w	80023d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021c4:	2200      	movs	r2, #0
 80021c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80021ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80021ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80021d2:	4622      	mov	r2, r4
 80021d4:	462b      	mov	r3, r5
 80021d6:	1891      	adds	r1, r2, r2
 80021d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80021da:	415b      	adcs	r3, r3
 80021dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021e2:	4621      	mov	r1, r4
 80021e4:	eb12 0801 	adds.w	r8, r2, r1
 80021e8:	4629      	mov	r1, r5
 80021ea:	eb43 0901 	adc.w	r9, r3, r1
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002202:	4690      	mov	r8, r2
 8002204:	4699      	mov	r9, r3
 8002206:	4623      	mov	r3, r4
 8002208:	eb18 0303 	adds.w	r3, r8, r3
 800220c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002210:	462b      	mov	r3, r5
 8002212:	eb49 0303 	adc.w	r3, r9, r3
 8002216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800221a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002226:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800222a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800222e:	460b      	mov	r3, r1
 8002230:	18db      	adds	r3, r3, r3
 8002232:	653b      	str	r3, [r7, #80]	@ 0x50
 8002234:	4613      	mov	r3, r2
 8002236:	eb42 0303 	adc.w	r3, r2, r3
 800223a:	657b      	str	r3, [r7, #84]	@ 0x54
 800223c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002244:	f7fe f844 	bl	80002d0 <__aeabi_uldivmod>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4b61      	ldr	r3, [pc, #388]	@ (80023d4 <UART_SetConfig+0x2d4>)
 800224e:	fba3 2302 	umull	r2, r3, r3, r2
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	011c      	lsls	r4, r3, #4
 8002256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800225a:	2200      	movs	r2, #0
 800225c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002260:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002268:	4642      	mov	r2, r8
 800226a:	464b      	mov	r3, r9
 800226c:	1891      	adds	r1, r2, r2
 800226e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002270:	415b      	adcs	r3, r3
 8002272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002278:	4641      	mov	r1, r8
 800227a:	eb12 0a01 	adds.w	sl, r2, r1
 800227e:	4649      	mov	r1, r9
 8002280:	eb43 0b01 	adc.w	fp, r3, r1
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002298:	4692      	mov	sl, r2
 800229a:	469b      	mov	fp, r3
 800229c:	4643      	mov	r3, r8
 800229e:	eb1a 0303 	adds.w	r3, sl, r3
 80022a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80022a6:	464b      	mov	r3, r9
 80022a8:	eb4b 0303 	adc.w	r3, fp, r3
 80022ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80022c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80022c4:	460b      	mov	r3, r1
 80022c6:	18db      	adds	r3, r3, r3
 80022c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80022ca:	4613      	mov	r3, r2
 80022cc:	eb42 0303 	adc.w	r3, r2, r3
 80022d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80022d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80022d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80022da:	f7fd fff9 	bl	80002d0 <__aeabi_uldivmod>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4611      	mov	r1, r2
 80022e4:	4b3b      	ldr	r3, [pc, #236]	@ (80023d4 <UART_SetConfig+0x2d4>)
 80022e6:	fba3 2301 	umull	r2, r3, r3, r1
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2264      	movs	r2, #100	@ 0x64
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	1acb      	subs	r3, r1, r3
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80022fa:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <UART_SetConfig+0x2d4>)
 80022fc:	fba3 2302 	umull	r2, r3, r3, r2
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002308:	441c      	add	r4, r3
 800230a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800230e:	2200      	movs	r2, #0
 8002310:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002314:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800231c:	4642      	mov	r2, r8
 800231e:	464b      	mov	r3, r9
 8002320:	1891      	adds	r1, r2, r2
 8002322:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002324:	415b      	adcs	r3, r3
 8002326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800232c:	4641      	mov	r1, r8
 800232e:	1851      	adds	r1, r2, r1
 8002330:	6339      	str	r1, [r7, #48]	@ 0x30
 8002332:	4649      	mov	r1, r9
 8002334:	414b      	adcs	r3, r1
 8002336:	637b      	str	r3, [r7, #52]	@ 0x34
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002344:	4659      	mov	r1, fp
 8002346:	00cb      	lsls	r3, r1, #3
 8002348:	4651      	mov	r1, sl
 800234a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800234e:	4651      	mov	r1, sl
 8002350:	00ca      	lsls	r2, r1, #3
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	4603      	mov	r3, r0
 8002358:	4642      	mov	r2, r8
 800235a:	189b      	adds	r3, r3, r2
 800235c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002360:	464b      	mov	r3, r9
 8002362:	460a      	mov	r2, r1
 8002364:	eb42 0303 	adc.w	r3, r2, r3
 8002368:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002378:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800237c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002380:	460b      	mov	r3, r1
 8002382:	18db      	adds	r3, r3, r3
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002386:	4613      	mov	r3, r2
 8002388:	eb42 0303 	adc.w	r3, r2, r3
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800238e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002396:	f7fd ff9b 	bl	80002d0 <__aeabi_uldivmod>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <UART_SetConfig+0x2d4>)
 80023a0:	fba3 1302 	umull	r1, r3, r3, r2
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	2164      	movs	r1, #100	@ 0x64
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	3332      	adds	r3, #50	@ 0x32
 80023b2:	4a08      	ldr	r2, [pc, #32]	@ (80023d4 <UART_SetConfig+0x2d4>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	f003 0207 	and.w	r2, r3, #7
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4422      	add	r2, r4
 80023c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023c8:	e106      	b.n	80025d8 <UART_SetConfig+0x4d8>
 80023ca:	bf00      	nop
 80023cc:	40011000 	.word	0x40011000
 80023d0:	40011400 	.word	0x40011400
 80023d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023dc:	2200      	movs	r2, #0
 80023de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80023e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80023e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80023ea:	4642      	mov	r2, r8
 80023ec:	464b      	mov	r3, r9
 80023ee:	1891      	adds	r1, r2, r2
 80023f0:	6239      	str	r1, [r7, #32]
 80023f2:	415b      	adcs	r3, r3
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023fa:	4641      	mov	r1, r8
 80023fc:	1854      	adds	r4, r2, r1
 80023fe:	4649      	mov	r1, r9
 8002400:	eb43 0501 	adc.w	r5, r3, r1
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	00eb      	lsls	r3, r5, #3
 800240e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002412:	00e2      	lsls	r2, r4, #3
 8002414:	4614      	mov	r4, r2
 8002416:	461d      	mov	r5, r3
 8002418:	4643      	mov	r3, r8
 800241a:	18e3      	adds	r3, r4, r3
 800241c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002420:	464b      	mov	r3, r9
 8002422:	eb45 0303 	adc.w	r3, r5, r3
 8002426:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800242a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002436:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002446:	4629      	mov	r1, r5
 8002448:	008b      	lsls	r3, r1, #2
 800244a:	4621      	mov	r1, r4
 800244c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002450:	4621      	mov	r1, r4
 8002452:	008a      	lsls	r2, r1, #2
 8002454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002458:	f7fd ff3a 	bl	80002d0 <__aeabi_uldivmod>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4b60      	ldr	r3, [pc, #384]	@ (80025e4 <UART_SetConfig+0x4e4>)
 8002462:	fba3 2302 	umull	r2, r3, r3, r2
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	011c      	lsls	r4, r3, #4
 800246a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800246e:	2200      	movs	r2, #0
 8002470:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002474:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800247c:	4642      	mov	r2, r8
 800247e:	464b      	mov	r3, r9
 8002480:	1891      	adds	r1, r2, r2
 8002482:	61b9      	str	r1, [r7, #24]
 8002484:	415b      	adcs	r3, r3
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800248c:	4641      	mov	r1, r8
 800248e:	1851      	adds	r1, r2, r1
 8002490:	6139      	str	r1, [r7, #16]
 8002492:	4649      	mov	r1, r9
 8002494:	414b      	adcs	r3, r1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024a4:	4659      	mov	r1, fp
 80024a6:	00cb      	lsls	r3, r1, #3
 80024a8:	4651      	mov	r1, sl
 80024aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024ae:	4651      	mov	r1, sl
 80024b0:	00ca      	lsls	r2, r1, #3
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	4603      	mov	r3, r0
 80024b8:	4642      	mov	r2, r8
 80024ba:	189b      	adds	r3, r3, r2
 80024bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024c0:	464b      	mov	r3, r9
 80024c2:	460a      	mov	r2, r1
 80024c4:	eb42 0303 	adc.w	r3, r2, r3
 80024c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80024e4:	4649      	mov	r1, r9
 80024e6:	008b      	lsls	r3, r1, #2
 80024e8:	4641      	mov	r1, r8
 80024ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024ee:	4641      	mov	r1, r8
 80024f0:	008a      	lsls	r2, r1, #2
 80024f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80024f6:	f7fd feeb 	bl	80002d0 <__aeabi_uldivmod>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	4b38      	ldr	r3, [pc, #224]	@ (80025e4 <UART_SetConfig+0x4e4>)
 8002502:	fba3 2301 	umull	r2, r3, r3, r1
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2264      	movs	r2, #100	@ 0x64
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	1acb      	subs	r3, r1, r3
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	3332      	adds	r3, #50	@ 0x32
 8002514:	4a33      	ldr	r2, [pc, #204]	@ (80025e4 <UART_SetConfig+0x4e4>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002520:	441c      	add	r4, r3
 8002522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002526:	2200      	movs	r2, #0
 8002528:	673b      	str	r3, [r7, #112]	@ 0x70
 800252a:	677a      	str	r2, [r7, #116]	@ 0x74
 800252c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002530:	4642      	mov	r2, r8
 8002532:	464b      	mov	r3, r9
 8002534:	1891      	adds	r1, r2, r2
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	415b      	adcs	r3, r3
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002540:	4641      	mov	r1, r8
 8002542:	1851      	adds	r1, r2, r1
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	4649      	mov	r1, r9
 8002548:	414b      	adcs	r3, r1
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002558:	4659      	mov	r1, fp
 800255a:	00cb      	lsls	r3, r1, #3
 800255c:	4651      	mov	r1, sl
 800255e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002562:	4651      	mov	r1, sl
 8002564:	00ca      	lsls	r2, r1, #3
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	4603      	mov	r3, r0
 800256c:	4642      	mov	r2, r8
 800256e:	189b      	adds	r3, r3, r2
 8002570:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002572:	464b      	mov	r3, r9
 8002574:	460a      	mov	r2, r1
 8002576:	eb42 0303 	adc.w	r3, r2, r3
 800257a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	663b      	str	r3, [r7, #96]	@ 0x60
 8002586:	667a      	str	r2, [r7, #100]	@ 0x64
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002594:	4649      	mov	r1, r9
 8002596:	008b      	lsls	r3, r1, #2
 8002598:	4641      	mov	r1, r8
 800259a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800259e:	4641      	mov	r1, r8
 80025a0:	008a      	lsls	r2, r1, #2
 80025a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80025a6:	f7fd fe93 	bl	80002d0 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4b0d      	ldr	r3, [pc, #52]	@ (80025e4 <UART_SetConfig+0x4e4>)
 80025b0:	fba3 1302 	umull	r1, r3, r3, r2
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	2164      	movs	r1, #100	@ 0x64
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	3332      	adds	r3, #50	@ 0x32
 80025c2:	4a08      	ldr	r2, [pc, #32]	@ (80025e4 <UART_SetConfig+0x4e4>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	f003 020f 	and.w	r2, r3, #15
 80025ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4422      	add	r2, r4
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80025de:	46bd      	mov	sp, r7
 80025e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025e4:	51eb851f 	.word	0x51eb851f

080025e8 <std>:
 80025e8:	2300      	movs	r3, #0
 80025ea:	b510      	push	{r4, lr}
 80025ec:	4604      	mov	r4, r0
 80025ee:	e9c0 3300 	strd	r3, r3, [r0]
 80025f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025f6:	6083      	str	r3, [r0, #8]
 80025f8:	8181      	strh	r1, [r0, #12]
 80025fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80025fc:	81c2      	strh	r2, [r0, #14]
 80025fe:	6183      	str	r3, [r0, #24]
 8002600:	4619      	mov	r1, r3
 8002602:	2208      	movs	r2, #8
 8002604:	305c      	adds	r0, #92	@ 0x5c
 8002606:	f000 f906 	bl	8002816 <memset>
 800260a:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <std+0x58>)
 800260c:	6263      	str	r3, [r4, #36]	@ 0x24
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <std+0x5c>)
 8002610:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <std+0x60>)
 8002614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002616:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <std+0x64>)
 8002618:	6323      	str	r3, [r4, #48]	@ 0x30
 800261a:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <std+0x68>)
 800261c:	6224      	str	r4, [r4, #32]
 800261e:	429c      	cmp	r4, r3
 8002620:	d006      	beq.n	8002630 <std+0x48>
 8002622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002626:	4294      	cmp	r4, r2
 8002628:	d002      	beq.n	8002630 <std+0x48>
 800262a:	33d0      	adds	r3, #208	@ 0xd0
 800262c:	429c      	cmp	r4, r3
 800262e:	d105      	bne.n	800263c <std+0x54>
 8002630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002638:	f000 b966 	b.w	8002908 <__retarget_lock_init_recursive>
 800263c:	bd10      	pop	{r4, pc}
 800263e:	bf00      	nop
 8002640:	08002791 	.word	0x08002791
 8002644:	080027b3 	.word	0x080027b3
 8002648:	080027eb 	.word	0x080027eb
 800264c:	0800280f 	.word	0x0800280f
 8002650:	200001e8 	.word	0x200001e8

08002654 <stdio_exit_handler>:
 8002654:	4a02      	ldr	r2, [pc, #8]	@ (8002660 <stdio_exit_handler+0xc>)
 8002656:	4903      	ldr	r1, [pc, #12]	@ (8002664 <stdio_exit_handler+0x10>)
 8002658:	4803      	ldr	r0, [pc, #12]	@ (8002668 <stdio_exit_handler+0x14>)
 800265a:	f000 b869 	b.w	8002730 <_fwalk_sglue>
 800265e:	bf00      	nop
 8002660:	2000000c 	.word	0x2000000c
 8002664:	080031a9 	.word	0x080031a9
 8002668:	2000001c 	.word	0x2000001c

0800266c <cleanup_stdio>:
 800266c:	6841      	ldr	r1, [r0, #4]
 800266e:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <cleanup_stdio+0x34>)
 8002670:	4299      	cmp	r1, r3
 8002672:	b510      	push	{r4, lr}
 8002674:	4604      	mov	r4, r0
 8002676:	d001      	beq.n	800267c <cleanup_stdio+0x10>
 8002678:	f000 fd96 	bl	80031a8 <_fflush_r>
 800267c:	68a1      	ldr	r1, [r4, #8]
 800267e:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <cleanup_stdio+0x38>)
 8002680:	4299      	cmp	r1, r3
 8002682:	d002      	beq.n	800268a <cleanup_stdio+0x1e>
 8002684:	4620      	mov	r0, r4
 8002686:	f000 fd8f 	bl	80031a8 <_fflush_r>
 800268a:	68e1      	ldr	r1, [r4, #12]
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <cleanup_stdio+0x3c>)
 800268e:	4299      	cmp	r1, r3
 8002690:	d004      	beq.n	800269c <cleanup_stdio+0x30>
 8002692:	4620      	mov	r0, r4
 8002694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002698:	f000 bd86 	b.w	80031a8 <_fflush_r>
 800269c:	bd10      	pop	{r4, pc}
 800269e:	bf00      	nop
 80026a0:	200001e8 	.word	0x200001e8
 80026a4:	20000250 	.word	0x20000250
 80026a8:	200002b8 	.word	0x200002b8

080026ac <global_stdio_init.part.0>:
 80026ac:	b510      	push	{r4, lr}
 80026ae:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <global_stdio_init.part.0+0x30>)
 80026b0:	4c0b      	ldr	r4, [pc, #44]	@ (80026e0 <global_stdio_init.part.0+0x34>)
 80026b2:	4a0c      	ldr	r2, [pc, #48]	@ (80026e4 <global_stdio_init.part.0+0x38>)
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	4620      	mov	r0, r4
 80026b8:	2200      	movs	r2, #0
 80026ba:	2104      	movs	r1, #4
 80026bc:	f7ff ff94 	bl	80025e8 <std>
 80026c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80026c4:	2201      	movs	r2, #1
 80026c6:	2109      	movs	r1, #9
 80026c8:	f7ff ff8e 	bl	80025e8 <std>
 80026cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80026d0:	2202      	movs	r2, #2
 80026d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026d6:	2112      	movs	r1, #18
 80026d8:	f7ff bf86 	b.w	80025e8 <std>
 80026dc:	20000320 	.word	0x20000320
 80026e0:	200001e8 	.word	0x200001e8
 80026e4:	08002655 	.word	0x08002655

080026e8 <__sfp_lock_acquire>:
 80026e8:	4801      	ldr	r0, [pc, #4]	@ (80026f0 <__sfp_lock_acquire+0x8>)
 80026ea:	f000 b90e 	b.w	800290a <__retarget_lock_acquire_recursive>
 80026ee:	bf00      	nop
 80026f0:	20000329 	.word	0x20000329

080026f4 <__sfp_lock_release>:
 80026f4:	4801      	ldr	r0, [pc, #4]	@ (80026fc <__sfp_lock_release+0x8>)
 80026f6:	f000 b909 	b.w	800290c <__retarget_lock_release_recursive>
 80026fa:	bf00      	nop
 80026fc:	20000329 	.word	0x20000329

08002700 <__sinit>:
 8002700:	b510      	push	{r4, lr}
 8002702:	4604      	mov	r4, r0
 8002704:	f7ff fff0 	bl	80026e8 <__sfp_lock_acquire>
 8002708:	6a23      	ldr	r3, [r4, #32]
 800270a:	b11b      	cbz	r3, 8002714 <__sinit+0x14>
 800270c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002710:	f7ff bff0 	b.w	80026f4 <__sfp_lock_release>
 8002714:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <__sinit+0x28>)
 8002716:	6223      	str	r3, [r4, #32]
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <__sinit+0x2c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f5      	bne.n	800270c <__sinit+0xc>
 8002720:	f7ff ffc4 	bl	80026ac <global_stdio_init.part.0>
 8002724:	e7f2      	b.n	800270c <__sinit+0xc>
 8002726:	bf00      	nop
 8002728:	0800266d 	.word	0x0800266d
 800272c:	20000320 	.word	0x20000320

08002730 <_fwalk_sglue>:
 8002730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002734:	4607      	mov	r7, r0
 8002736:	4688      	mov	r8, r1
 8002738:	4614      	mov	r4, r2
 800273a:	2600      	movs	r6, #0
 800273c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002740:	f1b9 0901 	subs.w	r9, r9, #1
 8002744:	d505      	bpl.n	8002752 <_fwalk_sglue+0x22>
 8002746:	6824      	ldr	r4, [r4, #0]
 8002748:	2c00      	cmp	r4, #0
 800274a:	d1f7      	bne.n	800273c <_fwalk_sglue+0xc>
 800274c:	4630      	mov	r0, r6
 800274e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002752:	89ab      	ldrh	r3, [r5, #12]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d907      	bls.n	8002768 <_fwalk_sglue+0x38>
 8002758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800275c:	3301      	adds	r3, #1
 800275e:	d003      	beq.n	8002768 <_fwalk_sglue+0x38>
 8002760:	4629      	mov	r1, r5
 8002762:	4638      	mov	r0, r7
 8002764:	47c0      	blx	r8
 8002766:	4306      	orrs	r6, r0
 8002768:	3568      	adds	r5, #104	@ 0x68
 800276a:	e7e9      	b.n	8002740 <_fwalk_sglue+0x10>

0800276c <iprintf>:
 800276c:	b40f      	push	{r0, r1, r2, r3}
 800276e:	b507      	push	{r0, r1, r2, lr}
 8002770:	4906      	ldr	r1, [pc, #24]	@ (800278c <iprintf+0x20>)
 8002772:	ab04      	add	r3, sp, #16
 8002774:	6808      	ldr	r0, [r1, #0]
 8002776:	f853 2b04 	ldr.w	r2, [r3], #4
 800277a:	6881      	ldr	r1, [r0, #8]
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	f000 f9e9 	bl	8002b54 <_vfiprintf_r>
 8002782:	b003      	add	sp, #12
 8002784:	f85d eb04 	ldr.w	lr, [sp], #4
 8002788:	b004      	add	sp, #16
 800278a:	4770      	bx	lr
 800278c:	20000018 	.word	0x20000018

08002790 <__sread>:
 8002790:	b510      	push	{r4, lr}
 8002792:	460c      	mov	r4, r1
 8002794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002798:	f000 f868 	bl	800286c <_read_r>
 800279c:	2800      	cmp	r0, #0
 800279e:	bfab      	itete	ge
 80027a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80027a2:	89a3      	ldrhlt	r3, [r4, #12]
 80027a4:	181b      	addge	r3, r3, r0
 80027a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80027aa:	bfac      	ite	ge
 80027ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80027ae:	81a3      	strhlt	r3, [r4, #12]
 80027b0:	bd10      	pop	{r4, pc}

080027b2 <__swrite>:
 80027b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027b6:	461f      	mov	r7, r3
 80027b8:	898b      	ldrh	r3, [r1, #12]
 80027ba:	05db      	lsls	r3, r3, #23
 80027bc:	4605      	mov	r5, r0
 80027be:	460c      	mov	r4, r1
 80027c0:	4616      	mov	r6, r2
 80027c2:	d505      	bpl.n	80027d0 <__swrite+0x1e>
 80027c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027c8:	2302      	movs	r3, #2
 80027ca:	2200      	movs	r2, #0
 80027cc:	f000 f83c 	bl	8002848 <_lseek_r>
 80027d0:	89a3      	ldrh	r3, [r4, #12]
 80027d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027da:	81a3      	strh	r3, [r4, #12]
 80027dc:	4632      	mov	r2, r6
 80027de:	463b      	mov	r3, r7
 80027e0:	4628      	mov	r0, r5
 80027e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027e6:	f000 b853 	b.w	8002890 <_write_r>

080027ea <__sseek>:
 80027ea:	b510      	push	{r4, lr}
 80027ec:	460c      	mov	r4, r1
 80027ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027f2:	f000 f829 	bl	8002848 <_lseek_r>
 80027f6:	1c43      	adds	r3, r0, #1
 80027f8:	89a3      	ldrh	r3, [r4, #12]
 80027fa:	bf15      	itete	ne
 80027fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80027fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002802:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002806:	81a3      	strheq	r3, [r4, #12]
 8002808:	bf18      	it	ne
 800280a:	81a3      	strhne	r3, [r4, #12]
 800280c:	bd10      	pop	{r4, pc}

0800280e <__sclose>:
 800280e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002812:	f000 b809 	b.w	8002828 <_close_r>

08002816 <memset>:
 8002816:	4402      	add	r2, r0
 8002818:	4603      	mov	r3, r0
 800281a:	4293      	cmp	r3, r2
 800281c:	d100      	bne.n	8002820 <memset+0xa>
 800281e:	4770      	bx	lr
 8002820:	f803 1b01 	strb.w	r1, [r3], #1
 8002824:	e7f9      	b.n	800281a <memset+0x4>
	...

08002828 <_close_r>:
 8002828:	b538      	push	{r3, r4, r5, lr}
 800282a:	4d06      	ldr	r5, [pc, #24]	@ (8002844 <_close_r+0x1c>)
 800282c:	2300      	movs	r3, #0
 800282e:	4604      	mov	r4, r0
 8002830:	4608      	mov	r0, r1
 8002832:	602b      	str	r3, [r5, #0]
 8002834:	f7fe fa97 	bl	8000d66 <_close>
 8002838:	1c43      	adds	r3, r0, #1
 800283a:	d102      	bne.n	8002842 <_close_r+0x1a>
 800283c:	682b      	ldr	r3, [r5, #0]
 800283e:	b103      	cbz	r3, 8002842 <_close_r+0x1a>
 8002840:	6023      	str	r3, [r4, #0]
 8002842:	bd38      	pop	{r3, r4, r5, pc}
 8002844:	20000324 	.word	0x20000324

08002848 <_lseek_r>:
 8002848:	b538      	push	{r3, r4, r5, lr}
 800284a:	4d07      	ldr	r5, [pc, #28]	@ (8002868 <_lseek_r+0x20>)
 800284c:	4604      	mov	r4, r0
 800284e:	4608      	mov	r0, r1
 8002850:	4611      	mov	r1, r2
 8002852:	2200      	movs	r2, #0
 8002854:	602a      	str	r2, [r5, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	f7fe faac 	bl	8000db4 <_lseek>
 800285c:	1c43      	adds	r3, r0, #1
 800285e:	d102      	bne.n	8002866 <_lseek_r+0x1e>
 8002860:	682b      	ldr	r3, [r5, #0]
 8002862:	b103      	cbz	r3, 8002866 <_lseek_r+0x1e>
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	bd38      	pop	{r3, r4, r5, pc}
 8002868:	20000324 	.word	0x20000324

0800286c <_read_r>:
 800286c:	b538      	push	{r3, r4, r5, lr}
 800286e:	4d07      	ldr	r5, [pc, #28]	@ (800288c <_read_r+0x20>)
 8002870:	4604      	mov	r4, r0
 8002872:	4608      	mov	r0, r1
 8002874:	4611      	mov	r1, r2
 8002876:	2200      	movs	r2, #0
 8002878:	602a      	str	r2, [r5, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	f7fe fa3a 	bl	8000cf4 <_read>
 8002880:	1c43      	adds	r3, r0, #1
 8002882:	d102      	bne.n	800288a <_read_r+0x1e>
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	b103      	cbz	r3, 800288a <_read_r+0x1e>
 8002888:	6023      	str	r3, [r4, #0]
 800288a:	bd38      	pop	{r3, r4, r5, pc}
 800288c:	20000324 	.word	0x20000324

08002890 <_write_r>:
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	4d07      	ldr	r5, [pc, #28]	@ (80028b0 <_write_r+0x20>)
 8002894:	4604      	mov	r4, r0
 8002896:	4608      	mov	r0, r1
 8002898:	4611      	mov	r1, r2
 800289a:	2200      	movs	r2, #0
 800289c:	602a      	str	r2, [r5, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	f7fe fa45 	bl	8000d2e <_write>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d102      	bne.n	80028ae <_write_r+0x1e>
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	b103      	cbz	r3, 80028ae <_write_r+0x1e>
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	bd38      	pop	{r3, r4, r5, pc}
 80028b0:	20000324 	.word	0x20000324

080028b4 <__errno>:
 80028b4:	4b01      	ldr	r3, [pc, #4]	@ (80028bc <__errno+0x8>)
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000018 	.word	0x20000018

080028c0 <__libc_init_array>:
 80028c0:	b570      	push	{r4, r5, r6, lr}
 80028c2:	4d0d      	ldr	r5, [pc, #52]	@ (80028f8 <__libc_init_array+0x38>)
 80028c4:	4c0d      	ldr	r4, [pc, #52]	@ (80028fc <__libc_init_array+0x3c>)
 80028c6:	1b64      	subs	r4, r4, r5
 80028c8:	10a4      	asrs	r4, r4, #2
 80028ca:	2600      	movs	r6, #0
 80028cc:	42a6      	cmp	r6, r4
 80028ce:	d109      	bne.n	80028e4 <__libc_init_array+0x24>
 80028d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002900 <__libc_init_array+0x40>)
 80028d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002904 <__libc_init_array+0x44>)
 80028d4:	f000 fdb8 	bl	8003448 <_init>
 80028d8:	1b64      	subs	r4, r4, r5
 80028da:	10a4      	asrs	r4, r4, #2
 80028dc:	2600      	movs	r6, #0
 80028de:	42a6      	cmp	r6, r4
 80028e0:	d105      	bne.n	80028ee <__libc_init_array+0x2e>
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
 80028e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e8:	4798      	blx	r3
 80028ea:	3601      	adds	r6, #1
 80028ec:	e7ee      	b.n	80028cc <__libc_init_array+0xc>
 80028ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f2:	4798      	blx	r3
 80028f4:	3601      	adds	r6, #1
 80028f6:	e7f2      	b.n	80028de <__libc_init_array+0x1e>
 80028f8:	080034c0 	.word	0x080034c0
 80028fc:	080034c0 	.word	0x080034c0
 8002900:	080034c0 	.word	0x080034c0
 8002904:	080034c4 	.word	0x080034c4

08002908 <__retarget_lock_init_recursive>:
 8002908:	4770      	bx	lr

0800290a <__retarget_lock_acquire_recursive>:
 800290a:	4770      	bx	lr

0800290c <__retarget_lock_release_recursive>:
 800290c:	4770      	bx	lr
	...

08002910 <_free_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4605      	mov	r5, r0
 8002914:	2900      	cmp	r1, #0
 8002916:	d041      	beq.n	800299c <_free_r+0x8c>
 8002918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800291c:	1f0c      	subs	r4, r1, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	bfb8      	it	lt
 8002922:	18e4      	addlt	r4, r4, r3
 8002924:	f000 f8e0 	bl	8002ae8 <__malloc_lock>
 8002928:	4a1d      	ldr	r2, [pc, #116]	@ (80029a0 <_free_r+0x90>)
 800292a:	6813      	ldr	r3, [r2, #0]
 800292c:	b933      	cbnz	r3, 800293c <_free_r+0x2c>
 800292e:	6063      	str	r3, [r4, #4]
 8002930:	6014      	str	r4, [r2, #0]
 8002932:	4628      	mov	r0, r5
 8002934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002938:	f000 b8dc 	b.w	8002af4 <__malloc_unlock>
 800293c:	42a3      	cmp	r3, r4
 800293e:	d908      	bls.n	8002952 <_free_r+0x42>
 8002940:	6820      	ldr	r0, [r4, #0]
 8002942:	1821      	adds	r1, r4, r0
 8002944:	428b      	cmp	r3, r1
 8002946:	bf01      	itttt	eq
 8002948:	6819      	ldreq	r1, [r3, #0]
 800294a:	685b      	ldreq	r3, [r3, #4]
 800294c:	1809      	addeq	r1, r1, r0
 800294e:	6021      	streq	r1, [r4, #0]
 8002950:	e7ed      	b.n	800292e <_free_r+0x1e>
 8002952:	461a      	mov	r2, r3
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	b10b      	cbz	r3, 800295c <_free_r+0x4c>
 8002958:	42a3      	cmp	r3, r4
 800295a:	d9fa      	bls.n	8002952 <_free_r+0x42>
 800295c:	6811      	ldr	r1, [r2, #0]
 800295e:	1850      	adds	r0, r2, r1
 8002960:	42a0      	cmp	r0, r4
 8002962:	d10b      	bne.n	800297c <_free_r+0x6c>
 8002964:	6820      	ldr	r0, [r4, #0]
 8002966:	4401      	add	r1, r0
 8002968:	1850      	adds	r0, r2, r1
 800296a:	4283      	cmp	r3, r0
 800296c:	6011      	str	r1, [r2, #0]
 800296e:	d1e0      	bne.n	8002932 <_free_r+0x22>
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	6053      	str	r3, [r2, #4]
 8002976:	4408      	add	r0, r1
 8002978:	6010      	str	r0, [r2, #0]
 800297a:	e7da      	b.n	8002932 <_free_r+0x22>
 800297c:	d902      	bls.n	8002984 <_free_r+0x74>
 800297e:	230c      	movs	r3, #12
 8002980:	602b      	str	r3, [r5, #0]
 8002982:	e7d6      	b.n	8002932 <_free_r+0x22>
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	1821      	adds	r1, r4, r0
 8002988:	428b      	cmp	r3, r1
 800298a:	bf04      	itt	eq
 800298c:	6819      	ldreq	r1, [r3, #0]
 800298e:	685b      	ldreq	r3, [r3, #4]
 8002990:	6063      	str	r3, [r4, #4]
 8002992:	bf04      	itt	eq
 8002994:	1809      	addeq	r1, r1, r0
 8002996:	6021      	streq	r1, [r4, #0]
 8002998:	6054      	str	r4, [r2, #4]
 800299a:	e7ca      	b.n	8002932 <_free_r+0x22>
 800299c:	bd38      	pop	{r3, r4, r5, pc}
 800299e:	bf00      	nop
 80029a0:	20000330 	.word	0x20000330

080029a4 <sbrk_aligned>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	4e0f      	ldr	r6, [pc, #60]	@ (80029e4 <sbrk_aligned+0x40>)
 80029a8:	460c      	mov	r4, r1
 80029aa:	6831      	ldr	r1, [r6, #0]
 80029ac:	4605      	mov	r5, r0
 80029ae:	b911      	cbnz	r1, 80029b6 <sbrk_aligned+0x12>
 80029b0:	f000 fcb6 	bl	8003320 <_sbrk_r>
 80029b4:	6030      	str	r0, [r6, #0]
 80029b6:	4621      	mov	r1, r4
 80029b8:	4628      	mov	r0, r5
 80029ba:	f000 fcb1 	bl	8003320 <_sbrk_r>
 80029be:	1c43      	adds	r3, r0, #1
 80029c0:	d103      	bne.n	80029ca <sbrk_aligned+0x26>
 80029c2:	f04f 34ff 	mov.w	r4, #4294967295
 80029c6:	4620      	mov	r0, r4
 80029c8:	bd70      	pop	{r4, r5, r6, pc}
 80029ca:	1cc4      	adds	r4, r0, #3
 80029cc:	f024 0403 	bic.w	r4, r4, #3
 80029d0:	42a0      	cmp	r0, r4
 80029d2:	d0f8      	beq.n	80029c6 <sbrk_aligned+0x22>
 80029d4:	1a21      	subs	r1, r4, r0
 80029d6:	4628      	mov	r0, r5
 80029d8:	f000 fca2 	bl	8003320 <_sbrk_r>
 80029dc:	3001      	adds	r0, #1
 80029de:	d1f2      	bne.n	80029c6 <sbrk_aligned+0x22>
 80029e0:	e7ef      	b.n	80029c2 <sbrk_aligned+0x1e>
 80029e2:	bf00      	nop
 80029e4:	2000032c 	.word	0x2000032c

080029e8 <_malloc_r>:
 80029e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029ec:	1ccd      	adds	r5, r1, #3
 80029ee:	f025 0503 	bic.w	r5, r5, #3
 80029f2:	3508      	adds	r5, #8
 80029f4:	2d0c      	cmp	r5, #12
 80029f6:	bf38      	it	cc
 80029f8:	250c      	movcc	r5, #12
 80029fa:	2d00      	cmp	r5, #0
 80029fc:	4606      	mov	r6, r0
 80029fe:	db01      	blt.n	8002a04 <_malloc_r+0x1c>
 8002a00:	42a9      	cmp	r1, r5
 8002a02:	d904      	bls.n	8002a0e <_malloc_r+0x26>
 8002a04:	230c      	movs	r3, #12
 8002a06:	6033      	str	r3, [r6, #0]
 8002a08:	2000      	movs	r0, #0
 8002a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ae4 <_malloc_r+0xfc>
 8002a12:	f000 f869 	bl	8002ae8 <__malloc_lock>
 8002a16:	f8d8 3000 	ldr.w	r3, [r8]
 8002a1a:	461c      	mov	r4, r3
 8002a1c:	bb44      	cbnz	r4, 8002a70 <_malloc_r+0x88>
 8002a1e:	4629      	mov	r1, r5
 8002a20:	4630      	mov	r0, r6
 8002a22:	f7ff ffbf 	bl	80029a4 <sbrk_aligned>
 8002a26:	1c43      	adds	r3, r0, #1
 8002a28:	4604      	mov	r4, r0
 8002a2a:	d158      	bne.n	8002ade <_malloc_r+0xf6>
 8002a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8002a30:	4627      	mov	r7, r4
 8002a32:	2f00      	cmp	r7, #0
 8002a34:	d143      	bne.n	8002abe <_malloc_r+0xd6>
 8002a36:	2c00      	cmp	r4, #0
 8002a38:	d04b      	beq.n	8002ad2 <_malloc_r+0xea>
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	4639      	mov	r1, r7
 8002a3e:	4630      	mov	r0, r6
 8002a40:	eb04 0903 	add.w	r9, r4, r3
 8002a44:	f000 fc6c 	bl	8003320 <_sbrk_r>
 8002a48:	4581      	cmp	r9, r0
 8002a4a:	d142      	bne.n	8002ad2 <_malloc_r+0xea>
 8002a4c:	6821      	ldr	r1, [r4, #0]
 8002a4e:	1a6d      	subs	r5, r5, r1
 8002a50:	4629      	mov	r1, r5
 8002a52:	4630      	mov	r0, r6
 8002a54:	f7ff ffa6 	bl	80029a4 <sbrk_aligned>
 8002a58:	3001      	adds	r0, #1
 8002a5a:	d03a      	beq.n	8002ad2 <_malloc_r+0xea>
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	442b      	add	r3, r5
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	f8d8 3000 	ldr.w	r3, [r8]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	bb62      	cbnz	r2, 8002ac4 <_malloc_r+0xdc>
 8002a6a:	f8c8 7000 	str.w	r7, [r8]
 8002a6e:	e00f      	b.n	8002a90 <_malloc_r+0xa8>
 8002a70:	6822      	ldr	r2, [r4, #0]
 8002a72:	1b52      	subs	r2, r2, r5
 8002a74:	d420      	bmi.n	8002ab8 <_malloc_r+0xd0>
 8002a76:	2a0b      	cmp	r2, #11
 8002a78:	d917      	bls.n	8002aaa <_malloc_r+0xc2>
 8002a7a:	1961      	adds	r1, r4, r5
 8002a7c:	42a3      	cmp	r3, r4
 8002a7e:	6025      	str	r5, [r4, #0]
 8002a80:	bf18      	it	ne
 8002a82:	6059      	strne	r1, [r3, #4]
 8002a84:	6863      	ldr	r3, [r4, #4]
 8002a86:	bf08      	it	eq
 8002a88:	f8c8 1000 	streq.w	r1, [r8]
 8002a8c:	5162      	str	r2, [r4, r5]
 8002a8e:	604b      	str	r3, [r1, #4]
 8002a90:	4630      	mov	r0, r6
 8002a92:	f000 f82f 	bl	8002af4 <__malloc_unlock>
 8002a96:	f104 000b 	add.w	r0, r4, #11
 8002a9a:	1d23      	adds	r3, r4, #4
 8002a9c:	f020 0007 	bic.w	r0, r0, #7
 8002aa0:	1ac2      	subs	r2, r0, r3
 8002aa2:	bf1c      	itt	ne
 8002aa4:	1a1b      	subne	r3, r3, r0
 8002aa6:	50a3      	strne	r3, [r4, r2]
 8002aa8:	e7af      	b.n	8002a0a <_malloc_r+0x22>
 8002aaa:	6862      	ldr	r2, [r4, #4]
 8002aac:	42a3      	cmp	r3, r4
 8002aae:	bf0c      	ite	eq
 8002ab0:	f8c8 2000 	streq.w	r2, [r8]
 8002ab4:	605a      	strne	r2, [r3, #4]
 8002ab6:	e7eb      	b.n	8002a90 <_malloc_r+0xa8>
 8002ab8:	4623      	mov	r3, r4
 8002aba:	6864      	ldr	r4, [r4, #4]
 8002abc:	e7ae      	b.n	8002a1c <_malloc_r+0x34>
 8002abe:	463c      	mov	r4, r7
 8002ac0:	687f      	ldr	r7, [r7, #4]
 8002ac2:	e7b6      	b.n	8002a32 <_malloc_r+0x4a>
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	42a3      	cmp	r3, r4
 8002aca:	d1fb      	bne.n	8002ac4 <_malloc_r+0xdc>
 8002acc:	2300      	movs	r3, #0
 8002ace:	6053      	str	r3, [r2, #4]
 8002ad0:	e7de      	b.n	8002a90 <_malloc_r+0xa8>
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	6033      	str	r3, [r6, #0]
 8002ad6:	4630      	mov	r0, r6
 8002ad8:	f000 f80c 	bl	8002af4 <__malloc_unlock>
 8002adc:	e794      	b.n	8002a08 <_malloc_r+0x20>
 8002ade:	6005      	str	r5, [r0, #0]
 8002ae0:	e7d6      	b.n	8002a90 <_malloc_r+0xa8>
 8002ae2:	bf00      	nop
 8002ae4:	20000330 	.word	0x20000330

08002ae8 <__malloc_lock>:
 8002ae8:	4801      	ldr	r0, [pc, #4]	@ (8002af0 <__malloc_lock+0x8>)
 8002aea:	f7ff bf0e 	b.w	800290a <__retarget_lock_acquire_recursive>
 8002aee:	bf00      	nop
 8002af0:	20000328 	.word	0x20000328

08002af4 <__malloc_unlock>:
 8002af4:	4801      	ldr	r0, [pc, #4]	@ (8002afc <__malloc_unlock+0x8>)
 8002af6:	f7ff bf09 	b.w	800290c <__retarget_lock_release_recursive>
 8002afa:	bf00      	nop
 8002afc:	20000328 	.word	0x20000328

08002b00 <__sfputc_r>:
 8002b00:	6893      	ldr	r3, [r2, #8]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	b410      	push	{r4}
 8002b08:	6093      	str	r3, [r2, #8]
 8002b0a:	da08      	bge.n	8002b1e <__sfputc_r+0x1e>
 8002b0c:	6994      	ldr	r4, [r2, #24]
 8002b0e:	42a3      	cmp	r3, r4
 8002b10:	db01      	blt.n	8002b16 <__sfputc_r+0x16>
 8002b12:	290a      	cmp	r1, #10
 8002b14:	d103      	bne.n	8002b1e <__sfputc_r+0x1e>
 8002b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b1a:	f000 bb6d 	b.w	80031f8 <__swbuf_r>
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	1c58      	adds	r0, r3, #1
 8002b22:	6010      	str	r0, [r2, #0]
 8002b24:	7019      	strb	r1, [r3, #0]
 8002b26:	4608      	mov	r0, r1
 8002b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <__sfputs_r>:
 8002b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b30:	4606      	mov	r6, r0
 8002b32:	460f      	mov	r7, r1
 8002b34:	4614      	mov	r4, r2
 8002b36:	18d5      	adds	r5, r2, r3
 8002b38:	42ac      	cmp	r4, r5
 8002b3a:	d101      	bne.n	8002b40 <__sfputs_r+0x12>
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e007      	b.n	8002b50 <__sfputs_r+0x22>
 8002b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b44:	463a      	mov	r2, r7
 8002b46:	4630      	mov	r0, r6
 8002b48:	f7ff ffda 	bl	8002b00 <__sfputc_r>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d1f3      	bne.n	8002b38 <__sfputs_r+0xa>
 8002b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b54 <_vfiprintf_r>:
 8002b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b58:	460d      	mov	r5, r1
 8002b5a:	b09d      	sub	sp, #116	@ 0x74
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	4698      	mov	r8, r3
 8002b60:	4606      	mov	r6, r0
 8002b62:	b118      	cbz	r0, 8002b6c <_vfiprintf_r+0x18>
 8002b64:	6a03      	ldr	r3, [r0, #32]
 8002b66:	b90b      	cbnz	r3, 8002b6c <_vfiprintf_r+0x18>
 8002b68:	f7ff fdca 	bl	8002700 <__sinit>
 8002b6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b6e:	07d9      	lsls	r1, r3, #31
 8002b70:	d405      	bmi.n	8002b7e <_vfiprintf_r+0x2a>
 8002b72:	89ab      	ldrh	r3, [r5, #12]
 8002b74:	059a      	lsls	r2, r3, #22
 8002b76:	d402      	bmi.n	8002b7e <_vfiprintf_r+0x2a>
 8002b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b7a:	f7ff fec6 	bl	800290a <__retarget_lock_acquire_recursive>
 8002b7e:	89ab      	ldrh	r3, [r5, #12]
 8002b80:	071b      	lsls	r3, r3, #28
 8002b82:	d501      	bpl.n	8002b88 <_vfiprintf_r+0x34>
 8002b84:	692b      	ldr	r3, [r5, #16]
 8002b86:	b99b      	cbnz	r3, 8002bb0 <_vfiprintf_r+0x5c>
 8002b88:	4629      	mov	r1, r5
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	f000 fb72 	bl	8003274 <__swsetup_r>
 8002b90:	b170      	cbz	r0, 8002bb0 <_vfiprintf_r+0x5c>
 8002b92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b94:	07dc      	lsls	r4, r3, #31
 8002b96:	d504      	bpl.n	8002ba2 <_vfiprintf_r+0x4e>
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	b01d      	add	sp, #116	@ 0x74
 8002b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ba2:	89ab      	ldrh	r3, [r5, #12]
 8002ba4:	0598      	lsls	r0, r3, #22
 8002ba6:	d4f7      	bmi.n	8002b98 <_vfiprintf_r+0x44>
 8002ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002baa:	f7ff feaf 	bl	800290c <__retarget_lock_release_recursive>
 8002bae:	e7f3      	b.n	8002b98 <_vfiprintf_r+0x44>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002bba:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bbe:	2330      	movs	r3, #48	@ 0x30
 8002bc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002d70 <_vfiprintf_r+0x21c>
 8002bc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002bc8:	f04f 0901 	mov.w	r9, #1
 8002bcc:	4623      	mov	r3, r4
 8002bce:	469a      	mov	sl, r3
 8002bd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bd4:	b10a      	cbz	r2, 8002bda <_vfiprintf_r+0x86>
 8002bd6:	2a25      	cmp	r2, #37	@ 0x25
 8002bd8:	d1f9      	bne.n	8002bce <_vfiprintf_r+0x7a>
 8002bda:	ebba 0b04 	subs.w	fp, sl, r4
 8002bde:	d00b      	beq.n	8002bf8 <_vfiprintf_r+0xa4>
 8002be0:	465b      	mov	r3, fp
 8002be2:	4622      	mov	r2, r4
 8002be4:	4629      	mov	r1, r5
 8002be6:	4630      	mov	r0, r6
 8002be8:	f7ff ffa1 	bl	8002b2e <__sfputs_r>
 8002bec:	3001      	adds	r0, #1
 8002bee:	f000 80a7 	beq.w	8002d40 <_vfiprintf_r+0x1ec>
 8002bf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002bf4:	445a      	add	r2, fp
 8002bf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8002bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 809f 	beq.w	8002d40 <_vfiprintf_r+0x1ec>
 8002c02:	2300      	movs	r3, #0
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295
 8002c08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c0c:	f10a 0a01 	add.w	sl, sl, #1
 8002c10:	9304      	str	r3, [sp, #16]
 8002c12:	9307      	str	r3, [sp, #28]
 8002c14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002c18:	931a      	str	r3, [sp, #104]	@ 0x68
 8002c1a:	4654      	mov	r4, sl
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c22:	4853      	ldr	r0, [pc, #332]	@ (8002d70 <_vfiprintf_r+0x21c>)
 8002c24:	f7fd fb04 	bl	8000230 <memchr>
 8002c28:	9a04      	ldr	r2, [sp, #16]
 8002c2a:	b9d8      	cbnz	r0, 8002c64 <_vfiprintf_r+0x110>
 8002c2c:	06d1      	lsls	r1, r2, #27
 8002c2e:	bf44      	itt	mi
 8002c30:	2320      	movmi	r3, #32
 8002c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c36:	0713      	lsls	r3, r2, #28
 8002c38:	bf44      	itt	mi
 8002c3a:	232b      	movmi	r3, #43	@ 0x2b
 8002c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c40:	f89a 3000 	ldrb.w	r3, [sl]
 8002c44:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c46:	d015      	beq.n	8002c74 <_vfiprintf_r+0x120>
 8002c48:	9a07      	ldr	r2, [sp, #28]
 8002c4a:	4654      	mov	r4, sl
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f04f 0c0a 	mov.w	ip, #10
 8002c52:	4621      	mov	r1, r4
 8002c54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c58:	3b30      	subs	r3, #48	@ 0x30
 8002c5a:	2b09      	cmp	r3, #9
 8002c5c:	d94b      	bls.n	8002cf6 <_vfiprintf_r+0x1a2>
 8002c5e:	b1b0      	cbz	r0, 8002c8e <_vfiprintf_r+0x13a>
 8002c60:	9207      	str	r2, [sp, #28]
 8002c62:	e014      	b.n	8002c8e <_vfiprintf_r+0x13a>
 8002c64:	eba0 0308 	sub.w	r3, r0, r8
 8002c68:	fa09 f303 	lsl.w	r3, r9, r3
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	9304      	str	r3, [sp, #16]
 8002c70:	46a2      	mov	sl, r4
 8002c72:	e7d2      	b.n	8002c1a <_vfiprintf_r+0xc6>
 8002c74:	9b03      	ldr	r3, [sp, #12]
 8002c76:	1d19      	adds	r1, r3, #4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	9103      	str	r1, [sp, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bfbb      	ittet	lt
 8002c80:	425b      	neglt	r3, r3
 8002c82:	f042 0202 	orrlt.w	r2, r2, #2
 8002c86:	9307      	strge	r3, [sp, #28]
 8002c88:	9307      	strlt	r3, [sp, #28]
 8002c8a:	bfb8      	it	lt
 8002c8c:	9204      	strlt	r2, [sp, #16]
 8002c8e:	7823      	ldrb	r3, [r4, #0]
 8002c90:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c92:	d10a      	bne.n	8002caa <_vfiprintf_r+0x156>
 8002c94:	7863      	ldrb	r3, [r4, #1]
 8002c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c98:	d132      	bne.n	8002d00 <_vfiprintf_r+0x1ac>
 8002c9a:	9b03      	ldr	r3, [sp, #12]
 8002c9c:	1d1a      	adds	r2, r3, #4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	9203      	str	r2, [sp, #12]
 8002ca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ca6:	3402      	adds	r4, #2
 8002ca8:	9305      	str	r3, [sp, #20]
 8002caa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002d80 <_vfiprintf_r+0x22c>
 8002cae:	7821      	ldrb	r1, [r4, #0]
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	4650      	mov	r0, sl
 8002cb4:	f7fd fabc 	bl	8000230 <memchr>
 8002cb8:	b138      	cbz	r0, 8002cca <_vfiprintf_r+0x176>
 8002cba:	9b04      	ldr	r3, [sp, #16]
 8002cbc:	eba0 000a 	sub.w	r0, r0, sl
 8002cc0:	2240      	movs	r2, #64	@ 0x40
 8002cc2:	4082      	lsls	r2, r0
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	3401      	adds	r4, #1
 8002cc8:	9304      	str	r3, [sp, #16]
 8002cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cce:	4829      	ldr	r0, [pc, #164]	@ (8002d74 <_vfiprintf_r+0x220>)
 8002cd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002cd4:	2206      	movs	r2, #6
 8002cd6:	f7fd faab 	bl	8000230 <memchr>
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d03f      	beq.n	8002d5e <_vfiprintf_r+0x20a>
 8002cde:	4b26      	ldr	r3, [pc, #152]	@ (8002d78 <_vfiprintf_r+0x224>)
 8002ce0:	bb1b      	cbnz	r3, 8002d2a <_vfiprintf_r+0x1d6>
 8002ce2:	9b03      	ldr	r3, [sp, #12]
 8002ce4:	3307      	adds	r3, #7
 8002ce6:	f023 0307 	bic.w	r3, r3, #7
 8002cea:	3308      	adds	r3, #8
 8002cec:	9303      	str	r3, [sp, #12]
 8002cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002cf0:	443b      	add	r3, r7
 8002cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cf4:	e76a      	b.n	8002bcc <_vfiprintf_r+0x78>
 8002cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cfa:	460c      	mov	r4, r1
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	e7a8      	b.n	8002c52 <_vfiprintf_r+0xfe>
 8002d00:	2300      	movs	r3, #0
 8002d02:	3401      	adds	r4, #1
 8002d04:	9305      	str	r3, [sp, #20]
 8002d06:	4619      	mov	r1, r3
 8002d08:	f04f 0c0a 	mov.w	ip, #10
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d12:	3a30      	subs	r2, #48	@ 0x30
 8002d14:	2a09      	cmp	r2, #9
 8002d16:	d903      	bls.n	8002d20 <_vfiprintf_r+0x1cc>
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0c6      	beq.n	8002caa <_vfiprintf_r+0x156>
 8002d1c:	9105      	str	r1, [sp, #20]
 8002d1e:	e7c4      	b.n	8002caa <_vfiprintf_r+0x156>
 8002d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d24:	4604      	mov	r4, r0
 8002d26:	2301      	movs	r3, #1
 8002d28:	e7f0      	b.n	8002d0c <_vfiprintf_r+0x1b8>
 8002d2a:	ab03      	add	r3, sp, #12
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	462a      	mov	r2, r5
 8002d30:	4b12      	ldr	r3, [pc, #72]	@ (8002d7c <_vfiprintf_r+0x228>)
 8002d32:	a904      	add	r1, sp, #16
 8002d34:	4630      	mov	r0, r6
 8002d36:	f3af 8000 	nop.w
 8002d3a:	4607      	mov	r7, r0
 8002d3c:	1c78      	adds	r0, r7, #1
 8002d3e:	d1d6      	bne.n	8002cee <_vfiprintf_r+0x19a>
 8002d40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d42:	07d9      	lsls	r1, r3, #31
 8002d44:	d405      	bmi.n	8002d52 <_vfiprintf_r+0x1fe>
 8002d46:	89ab      	ldrh	r3, [r5, #12]
 8002d48:	059a      	lsls	r2, r3, #22
 8002d4a:	d402      	bmi.n	8002d52 <_vfiprintf_r+0x1fe>
 8002d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d4e:	f7ff fddd 	bl	800290c <__retarget_lock_release_recursive>
 8002d52:	89ab      	ldrh	r3, [r5, #12]
 8002d54:	065b      	lsls	r3, r3, #25
 8002d56:	f53f af1f 	bmi.w	8002b98 <_vfiprintf_r+0x44>
 8002d5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002d5c:	e71e      	b.n	8002b9c <_vfiprintf_r+0x48>
 8002d5e:	ab03      	add	r3, sp, #12
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	462a      	mov	r2, r5
 8002d64:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <_vfiprintf_r+0x228>)
 8002d66:	a904      	add	r1, sp, #16
 8002d68:	4630      	mov	r0, r6
 8002d6a:	f000 f879 	bl	8002e60 <_printf_i>
 8002d6e:	e7e4      	b.n	8002d3a <_vfiprintf_r+0x1e6>
 8002d70:	08003484 	.word	0x08003484
 8002d74:	0800348e 	.word	0x0800348e
 8002d78:	00000000 	.word	0x00000000
 8002d7c:	08002b2f 	.word	0x08002b2f
 8002d80:	0800348a 	.word	0x0800348a

08002d84 <_printf_common>:
 8002d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d88:	4616      	mov	r6, r2
 8002d8a:	4698      	mov	r8, r3
 8002d8c:	688a      	ldr	r2, [r1, #8]
 8002d8e:	690b      	ldr	r3, [r1, #16]
 8002d90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002d94:	4293      	cmp	r3, r2
 8002d96:	bfb8      	it	lt
 8002d98:	4613      	movlt	r3, r2
 8002d9a:	6033      	str	r3, [r6, #0]
 8002d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002da0:	4607      	mov	r7, r0
 8002da2:	460c      	mov	r4, r1
 8002da4:	b10a      	cbz	r2, 8002daa <_printf_common+0x26>
 8002da6:	3301      	adds	r3, #1
 8002da8:	6033      	str	r3, [r6, #0]
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	0699      	lsls	r1, r3, #26
 8002dae:	bf42      	ittt	mi
 8002db0:	6833      	ldrmi	r3, [r6, #0]
 8002db2:	3302      	addmi	r3, #2
 8002db4:	6033      	strmi	r3, [r6, #0]
 8002db6:	6825      	ldr	r5, [r4, #0]
 8002db8:	f015 0506 	ands.w	r5, r5, #6
 8002dbc:	d106      	bne.n	8002dcc <_printf_common+0x48>
 8002dbe:	f104 0a19 	add.w	sl, r4, #25
 8002dc2:	68e3      	ldr	r3, [r4, #12]
 8002dc4:	6832      	ldr	r2, [r6, #0]
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	42ab      	cmp	r3, r5
 8002dca:	dc26      	bgt.n	8002e1a <_printf_common+0x96>
 8002dcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002dd0:	6822      	ldr	r2, [r4, #0]
 8002dd2:	3b00      	subs	r3, #0
 8002dd4:	bf18      	it	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	0692      	lsls	r2, r2, #26
 8002dda:	d42b      	bmi.n	8002e34 <_printf_common+0xb0>
 8002ddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002de0:	4641      	mov	r1, r8
 8002de2:	4638      	mov	r0, r7
 8002de4:	47c8      	blx	r9
 8002de6:	3001      	adds	r0, #1
 8002de8:	d01e      	beq.n	8002e28 <_printf_common+0xa4>
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	6922      	ldr	r2, [r4, #16]
 8002dee:	f003 0306 	and.w	r3, r3, #6
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	bf02      	ittt	eq
 8002df6:	68e5      	ldreq	r5, [r4, #12]
 8002df8:	6833      	ldreq	r3, [r6, #0]
 8002dfa:	1aed      	subeq	r5, r5, r3
 8002dfc:	68a3      	ldr	r3, [r4, #8]
 8002dfe:	bf0c      	ite	eq
 8002e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e04:	2500      	movne	r5, #0
 8002e06:	4293      	cmp	r3, r2
 8002e08:	bfc4      	itt	gt
 8002e0a:	1a9b      	subgt	r3, r3, r2
 8002e0c:	18ed      	addgt	r5, r5, r3
 8002e0e:	2600      	movs	r6, #0
 8002e10:	341a      	adds	r4, #26
 8002e12:	42b5      	cmp	r5, r6
 8002e14:	d11a      	bne.n	8002e4c <_printf_common+0xc8>
 8002e16:	2000      	movs	r0, #0
 8002e18:	e008      	b.n	8002e2c <_printf_common+0xa8>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	4652      	mov	r2, sl
 8002e1e:	4641      	mov	r1, r8
 8002e20:	4638      	mov	r0, r7
 8002e22:	47c8      	blx	r9
 8002e24:	3001      	adds	r0, #1
 8002e26:	d103      	bne.n	8002e30 <_printf_common+0xac>
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e30:	3501      	adds	r5, #1
 8002e32:	e7c6      	b.n	8002dc2 <_printf_common+0x3e>
 8002e34:	18e1      	adds	r1, r4, r3
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	2030      	movs	r0, #48	@ 0x30
 8002e3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002e3e:	4422      	add	r2, r4
 8002e40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002e44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002e48:	3302      	adds	r3, #2
 8002e4a:	e7c7      	b.n	8002ddc <_printf_common+0x58>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	4622      	mov	r2, r4
 8002e50:	4641      	mov	r1, r8
 8002e52:	4638      	mov	r0, r7
 8002e54:	47c8      	blx	r9
 8002e56:	3001      	adds	r0, #1
 8002e58:	d0e6      	beq.n	8002e28 <_printf_common+0xa4>
 8002e5a:	3601      	adds	r6, #1
 8002e5c:	e7d9      	b.n	8002e12 <_printf_common+0x8e>
	...

08002e60 <_printf_i>:
 8002e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e64:	7e0f      	ldrb	r7, [r1, #24]
 8002e66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002e68:	2f78      	cmp	r7, #120	@ 0x78
 8002e6a:	4691      	mov	r9, r2
 8002e6c:	4680      	mov	r8, r0
 8002e6e:	460c      	mov	r4, r1
 8002e70:	469a      	mov	sl, r3
 8002e72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002e76:	d807      	bhi.n	8002e88 <_printf_i+0x28>
 8002e78:	2f62      	cmp	r7, #98	@ 0x62
 8002e7a:	d80a      	bhi.n	8002e92 <_printf_i+0x32>
 8002e7c:	2f00      	cmp	r7, #0
 8002e7e:	f000 80d2 	beq.w	8003026 <_printf_i+0x1c6>
 8002e82:	2f58      	cmp	r7, #88	@ 0x58
 8002e84:	f000 80b9 	beq.w	8002ffa <_printf_i+0x19a>
 8002e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002e90:	e03a      	b.n	8002f08 <_printf_i+0xa8>
 8002e92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002e96:	2b15      	cmp	r3, #21
 8002e98:	d8f6      	bhi.n	8002e88 <_printf_i+0x28>
 8002e9a:	a101      	add	r1, pc, #4	@ (adr r1, 8002ea0 <_printf_i+0x40>)
 8002e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ea0:	08002ef9 	.word	0x08002ef9
 8002ea4:	08002f0d 	.word	0x08002f0d
 8002ea8:	08002e89 	.word	0x08002e89
 8002eac:	08002e89 	.word	0x08002e89
 8002eb0:	08002e89 	.word	0x08002e89
 8002eb4:	08002e89 	.word	0x08002e89
 8002eb8:	08002f0d 	.word	0x08002f0d
 8002ebc:	08002e89 	.word	0x08002e89
 8002ec0:	08002e89 	.word	0x08002e89
 8002ec4:	08002e89 	.word	0x08002e89
 8002ec8:	08002e89 	.word	0x08002e89
 8002ecc:	0800300d 	.word	0x0800300d
 8002ed0:	08002f37 	.word	0x08002f37
 8002ed4:	08002fc7 	.word	0x08002fc7
 8002ed8:	08002e89 	.word	0x08002e89
 8002edc:	08002e89 	.word	0x08002e89
 8002ee0:	0800302f 	.word	0x0800302f
 8002ee4:	08002e89 	.word	0x08002e89
 8002ee8:	08002f37 	.word	0x08002f37
 8002eec:	08002e89 	.word	0x08002e89
 8002ef0:	08002e89 	.word	0x08002e89
 8002ef4:	08002fcf 	.word	0x08002fcf
 8002ef8:	6833      	ldr	r3, [r6, #0]
 8002efa:	1d1a      	adds	r2, r3, #4
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6032      	str	r2, [r6, #0]
 8002f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e09d      	b.n	8003048 <_printf_i+0x1e8>
 8002f0c:	6833      	ldr	r3, [r6, #0]
 8002f0e:	6820      	ldr	r0, [r4, #0]
 8002f10:	1d19      	adds	r1, r3, #4
 8002f12:	6031      	str	r1, [r6, #0]
 8002f14:	0606      	lsls	r6, r0, #24
 8002f16:	d501      	bpl.n	8002f1c <_printf_i+0xbc>
 8002f18:	681d      	ldr	r5, [r3, #0]
 8002f1a:	e003      	b.n	8002f24 <_printf_i+0xc4>
 8002f1c:	0645      	lsls	r5, r0, #25
 8002f1e:	d5fb      	bpl.n	8002f18 <_printf_i+0xb8>
 8002f20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002f24:	2d00      	cmp	r5, #0
 8002f26:	da03      	bge.n	8002f30 <_printf_i+0xd0>
 8002f28:	232d      	movs	r3, #45	@ 0x2d
 8002f2a:	426d      	negs	r5, r5
 8002f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f30:	4859      	ldr	r0, [pc, #356]	@ (8003098 <_printf_i+0x238>)
 8002f32:	230a      	movs	r3, #10
 8002f34:	e011      	b.n	8002f5a <_printf_i+0xfa>
 8002f36:	6821      	ldr	r1, [r4, #0]
 8002f38:	6833      	ldr	r3, [r6, #0]
 8002f3a:	0608      	lsls	r0, r1, #24
 8002f3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002f40:	d402      	bmi.n	8002f48 <_printf_i+0xe8>
 8002f42:	0649      	lsls	r1, r1, #25
 8002f44:	bf48      	it	mi
 8002f46:	b2ad      	uxthmi	r5, r5
 8002f48:	2f6f      	cmp	r7, #111	@ 0x6f
 8002f4a:	4853      	ldr	r0, [pc, #332]	@ (8003098 <_printf_i+0x238>)
 8002f4c:	6033      	str	r3, [r6, #0]
 8002f4e:	bf14      	ite	ne
 8002f50:	230a      	movne	r3, #10
 8002f52:	2308      	moveq	r3, #8
 8002f54:	2100      	movs	r1, #0
 8002f56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002f5a:	6866      	ldr	r6, [r4, #4]
 8002f5c:	60a6      	str	r6, [r4, #8]
 8002f5e:	2e00      	cmp	r6, #0
 8002f60:	bfa2      	ittt	ge
 8002f62:	6821      	ldrge	r1, [r4, #0]
 8002f64:	f021 0104 	bicge.w	r1, r1, #4
 8002f68:	6021      	strge	r1, [r4, #0]
 8002f6a:	b90d      	cbnz	r5, 8002f70 <_printf_i+0x110>
 8002f6c:	2e00      	cmp	r6, #0
 8002f6e:	d04b      	beq.n	8003008 <_printf_i+0x1a8>
 8002f70:	4616      	mov	r6, r2
 8002f72:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f76:	fb03 5711 	mls	r7, r3, r1, r5
 8002f7a:	5dc7      	ldrb	r7, [r0, r7]
 8002f7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f80:	462f      	mov	r7, r5
 8002f82:	42bb      	cmp	r3, r7
 8002f84:	460d      	mov	r5, r1
 8002f86:	d9f4      	bls.n	8002f72 <_printf_i+0x112>
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d10b      	bne.n	8002fa4 <_printf_i+0x144>
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	07df      	lsls	r7, r3, #31
 8002f90:	d508      	bpl.n	8002fa4 <_printf_i+0x144>
 8002f92:	6923      	ldr	r3, [r4, #16]
 8002f94:	6861      	ldr	r1, [r4, #4]
 8002f96:	4299      	cmp	r1, r3
 8002f98:	bfde      	ittt	le
 8002f9a:	2330      	movle	r3, #48	@ 0x30
 8002f9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002fa4:	1b92      	subs	r2, r2, r6
 8002fa6:	6122      	str	r2, [r4, #16]
 8002fa8:	f8cd a000 	str.w	sl, [sp]
 8002fac:	464b      	mov	r3, r9
 8002fae:	aa03      	add	r2, sp, #12
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	4640      	mov	r0, r8
 8002fb4:	f7ff fee6 	bl	8002d84 <_printf_common>
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d14a      	bne.n	8003052 <_printf_i+0x1f2>
 8002fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc0:	b004      	add	sp, #16
 8002fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	f043 0320 	orr.w	r3, r3, #32
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	4833      	ldr	r0, [pc, #204]	@ (800309c <_printf_i+0x23c>)
 8002fd0:	2778      	movs	r7, #120	@ 0x78
 8002fd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	6831      	ldr	r1, [r6, #0]
 8002fda:	061f      	lsls	r7, r3, #24
 8002fdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8002fe0:	d402      	bmi.n	8002fe8 <_printf_i+0x188>
 8002fe2:	065f      	lsls	r7, r3, #25
 8002fe4:	bf48      	it	mi
 8002fe6:	b2ad      	uxthmi	r5, r5
 8002fe8:	6031      	str	r1, [r6, #0]
 8002fea:	07d9      	lsls	r1, r3, #31
 8002fec:	bf44      	itt	mi
 8002fee:	f043 0320 	orrmi.w	r3, r3, #32
 8002ff2:	6023      	strmi	r3, [r4, #0]
 8002ff4:	b11d      	cbz	r5, 8002ffe <_printf_i+0x19e>
 8002ff6:	2310      	movs	r3, #16
 8002ff8:	e7ac      	b.n	8002f54 <_printf_i+0xf4>
 8002ffa:	4827      	ldr	r0, [pc, #156]	@ (8003098 <_printf_i+0x238>)
 8002ffc:	e7e9      	b.n	8002fd2 <_printf_i+0x172>
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	f023 0320 	bic.w	r3, r3, #32
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	e7f6      	b.n	8002ff6 <_printf_i+0x196>
 8003008:	4616      	mov	r6, r2
 800300a:	e7bd      	b.n	8002f88 <_printf_i+0x128>
 800300c:	6833      	ldr	r3, [r6, #0]
 800300e:	6825      	ldr	r5, [r4, #0]
 8003010:	6961      	ldr	r1, [r4, #20]
 8003012:	1d18      	adds	r0, r3, #4
 8003014:	6030      	str	r0, [r6, #0]
 8003016:	062e      	lsls	r6, r5, #24
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	d501      	bpl.n	8003020 <_printf_i+0x1c0>
 800301c:	6019      	str	r1, [r3, #0]
 800301e:	e002      	b.n	8003026 <_printf_i+0x1c6>
 8003020:	0668      	lsls	r0, r5, #25
 8003022:	d5fb      	bpl.n	800301c <_printf_i+0x1bc>
 8003024:	8019      	strh	r1, [r3, #0]
 8003026:	2300      	movs	r3, #0
 8003028:	6123      	str	r3, [r4, #16]
 800302a:	4616      	mov	r6, r2
 800302c:	e7bc      	b.n	8002fa8 <_printf_i+0x148>
 800302e:	6833      	ldr	r3, [r6, #0]
 8003030:	1d1a      	adds	r2, r3, #4
 8003032:	6032      	str	r2, [r6, #0]
 8003034:	681e      	ldr	r6, [r3, #0]
 8003036:	6862      	ldr	r2, [r4, #4]
 8003038:	2100      	movs	r1, #0
 800303a:	4630      	mov	r0, r6
 800303c:	f7fd f8f8 	bl	8000230 <memchr>
 8003040:	b108      	cbz	r0, 8003046 <_printf_i+0x1e6>
 8003042:	1b80      	subs	r0, r0, r6
 8003044:	6060      	str	r0, [r4, #4]
 8003046:	6863      	ldr	r3, [r4, #4]
 8003048:	6123      	str	r3, [r4, #16]
 800304a:	2300      	movs	r3, #0
 800304c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003050:	e7aa      	b.n	8002fa8 <_printf_i+0x148>
 8003052:	6923      	ldr	r3, [r4, #16]
 8003054:	4632      	mov	r2, r6
 8003056:	4649      	mov	r1, r9
 8003058:	4640      	mov	r0, r8
 800305a:	47d0      	blx	sl
 800305c:	3001      	adds	r0, #1
 800305e:	d0ad      	beq.n	8002fbc <_printf_i+0x15c>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	079b      	lsls	r3, r3, #30
 8003064:	d413      	bmi.n	800308e <_printf_i+0x22e>
 8003066:	68e0      	ldr	r0, [r4, #12]
 8003068:	9b03      	ldr	r3, [sp, #12]
 800306a:	4298      	cmp	r0, r3
 800306c:	bfb8      	it	lt
 800306e:	4618      	movlt	r0, r3
 8003070:	e7a6      	b.n	8002fc0 <_printf_i+0x160>
 8003072:	2301      	movs	r3, #1
 8003074:	4632      	mov	r2, r6
 8003076:	4649      	mov	r1, r9
 8003078:	4640      	mov	r0, r8
 800307a:	47d0      	blx	sl
 800307c:	3001      	adds	r0, #1
 800307e:	d09d      	beq.n	8002fbc <_printf_i+0x15c>
 8003080:	3501      	adds	r5, #1
 8003082:	68e3      	ldr	r3, [r4, #12]
 8003084:	9903      	ldr	r1, [sp, #12]
 8003086:	1a5b      	subs	r3, r3, r1
 8003088:	42ab      	cmp	r3, r5
 800308a:	dcf2      	bgt.n	8003072 <_printf_i+0x212>
 800308c:	e7eb      	b.n	8003066 <_printf_i+0x206>
 800308e:	2500      	movs	r5, #0
 8003090:	f104 0619 	add.w	r6, r4, #25
 8003094:	e7f5      	b.n	8003082 <_printf_i+0x222>
 8003096:	bf00      	nop
 8003098:	08003495 	.word	0x08003495
 800309c:	080034a6 	.word	0x080034a6

080030a0 <__sflush_r>:
 80030a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80030a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a8:	0716      	lsls	r6, r2, #28
 80030aa:	4605      	mov	r5, r0
 80030ac:	460c      	mov	r4, r1
 80030ae:	d454      	bmi.n	800315a <__sflush_r+0xba>
 80030b0:	684b      	ldr	r3, [r1, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	dc02      	bgt.n	80030bc <__sflush_r+0x1c>
 80030b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	dd48      	ble.n	800314e <__sflush_r+0xae>
 80030bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80030be:	2e00      	cmp	r6, #0
 80030c0:	d045      	beq.n	800314e <__sflush_r+0xae>
 80030c2:	2300      	movs	r3, #0
 80030c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80030c8:	682f      	ldr	r7, [r5, #0]
 80030ca:	6a21      	ldr	r1, [r4, #32]
 80030cc:	602b      	str	r3, [r5, #0]
 80030ce:	d030      	beq.n	8003132 <__sflush_r+0x92>
 80030d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	0759      	lsls	r1, r3, #29
 80030d6:	d505      	bpl.n	80030e4 <__sflush_r+0x44>
 80030d8:	6863      	ldr	r3, [r4, #4]
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80030de:	b10b      	cbz	r3, 80030e4 <__sflush_r+0x44>
 80030e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80030e2:	1ad2      	subs	r2, r2, r3
 80030e4:	2300      	movs	r3, #0
 80030e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80030e8:	6a21      	ldr	r1, [r4, #32]
 80030ea:	4628      	mov	r0, r5
 80030ec:	47b0      	blx	r6
 80030ee:	1c43      	adds	r3, r0, #1
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	d106      	bne.n	8003102 <__sflush_r+0x62>
 80030f4:	6829      	ldr	r1, [r5, #0]
 80030f6:	291d      	cmp	r1, #29
 80030f8:	d82b      	bhi.n	8003152 <__sflush_r+0xb2>
 80030fa:	4a2a      	ldr	r2, [pc, #168]	@ (80031a4 <__sflush_r+0x104>)
 80030fc:	410a      	asrs	r2, r1
 80030fe:	07d6      	lsls	r6, r2, #31
 8003100:	d427      	bmi.n	8003152 <__sflush_r+0xb2>
 8003102:	2200      	movs	r2, #0
 8003104:	6062      	str	r2, [r4, #4]
 8003106:	04d9      	lsls	r1, r3, #19
 8003108:	6922      	ldr	r2, [r4, #16]
 800310a:	6022      	str	r2, [r4, #0]
 800310c:	d504      	bpl.n	8003118 <__sflush_r+0x78>
 800310e:	1c42      	adds	r2, r0, #1
 8003110:	d101      	bne.n	8003116 <__sflush_r+0x76>
 8003112:	682b      	ldr	r3, [r5, #0]
 8003114:	b903      	cbnz	r3, 8003118 <__sflush_r+0x78>
 8003116:	6560      	str	r0, [r4, #84]	@ 0x54
 8003118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800311a:	602f      	str	r7, [r5, #0]
 800311c:	b1b9      	cbz	r1, 800314e <__sflush_r+0xae>
 800311e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003122:	4299      	cmp	r1, r3
 8003124:	d002      	beq.n	800312c <__sflush_r+0x8c>
 8003126:	4628      	mov	r0, r5
 8003128:	f7ff fbf2 	bl	8002910 <_free_r>
 800312c:	2300      	movs	r3, #0
 800312e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003130:	e00d      	b.n	800314e <__sflush_r+0xae>
 8003132:	2301      	movs	r3, #1
 8003134:	4628      	mov	r0, r5
 8003136:	47b0      	blx	r6
 8003138:	4602      	mov	r2, r0
 800313a:	1c50      	adds	r0, r2, #1
 800313c:	d1c9      	bne.n	80030d2 <__sflush_r+0x32>
 800313e:	682b      	ldr	r3, [r5, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0c6      	beq.n	80030d2 <__sflush_r+0x32>
 8003144:	2b1d      	cmp	r3, #29
 8003146:	d001      	beq.n	800314c <__sflush_r+0xac>
 8003148:	2b16      	cmp	r3, #22
 800314a:	d11e      	bne.n	800318a <__sflush_r+0xea>
 800314c:	602f      	str	r7, [r5, #0]
 800314e:	2000      	movs	r0, #0
 8003150:	e022      	b.n	8003198 <__sflush_r+0xf8>
 8003152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003156:	b21b      	sxth	r3, r3
 8003158:	e01b      	b.n	8003192 <__sflush_r+0xf2>
 800315a:	690f      	ldr	r7, [r1, #16]
 800315c:	2f00      	cmp	r7, #0
 800315e:	d0f6      	beq.n	800314e <__sflush_r+0xae>
 8003160:	0793      	lsls	r3, r2, #30
 8003162:	680e      	ldr	r6, [r1, #0]
 8003164:	bf08      	it	eq
 8003166:	694b      	ldreq	r3, [r1, #20]
 8003168:	600f      	str	r7, [r1, #0]
 800316a:	bf18      	it	ne
 800316c:	2300      	movne	r3, #0
 800316e:	eba6 0807 	sub.w	r8, r6, r7
 8003172:	608b      	str	r3, [r1, #8]
 8003174:	f1b8 0f00 	cmp.w	r8, #0
 8003178:	dde9      	ble.n	800314e <__sflush_r+0xae>
 800317a:	6a21      	ldr	r1, [r4, #32]
 800317c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800317e:	4643      	mov	r3, r8
 8003180:	463a      	mov	r2, r7
 8003182:	4628      	mov	r0, r5
 8003184:	47b0      	blx	r6
 8003186:	2800      	cmp	r0, #0
 8003188:	dc08      	bgt.n	800319c <__sflush_r+0xfc>
 800318a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800318e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003192:	81a3      	strh	r3, [r4, #12]
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800319c:	4407      	add	r7, r0
 800319e:	eba8 0800 	sub.w	r8, r8, r0
 80031a2:	e7e7      	b.n	8003174 <__sflush_r+0xd4>
 80031a4:	dfbffffe 	.word	0xdfbffffe

080031a8 <_fflush_r>:
 80031a8:	b538      	push	{r3, r4, r5, lr}
 80031aa:	690b      	ldr	r3, [r1, #16]
 80031ac:	4605      	mov	r5, r0
 80031ae:	460c      	mov	r4, r1
 80031b0:	b913      	cbnz	r3, 80031b8 <_fflush_r+0x10>
 80031b2:	2500      	movs	r5, #0
 80031b4:	4628      	mov	r0, r5
 80031b6:	bd38      	pop	{r3, r4, r5, pc}
 80031b8:	b118      	cbz	r0, 80031c2 <_fflush_r+0x1a>
 80031ba:	6a03      	ldr	r3, [r0, #32]
 80031bc:	b90b      	cbnz	r3, 80031c2 <_fflush_r+0x1a>
 80031be:	f7ff fa9f 	bl	8002700 <__sinit>
 80031c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f3      	beq.n	80031b2 <_fflush_r+0xa>
 80031ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80031cc:	07d0      	lsls	r0, r2, #31
 80031ce:	d404      	bmi.n	80031da <_fflush_r+0x32>
 80031d0:	0599      	lsls	r1, r3, #22
 80031d2:	d402      	bmi.n	80031da <_fflush_r+0x32>
 80031d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031d6:	f7ff fb98 	bl	800290a <__retarget_lock_acquire_recursive>
 80031da:	4628      	mov	r0, r5
 80031dc:	4621      	mov	r1, r4
 80031de:	f7ff ff5f 	bl	80030a0 <__sflush_r>
 80031e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031e4:	07da      	lsls	r2, r3, #31
 80031e6:	4605      	mov	r5, r0
 80031e8:	d4e4      	bmi.n	80031b4 <_fflush_r+0xc>
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	059b      	lsls	r3, r3, #22
 80031ee:	d4e1      	bmi.n	80031b4 <_fflush_r+0xc>
 80031f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031f2:	f7ff fb8b 	bl	800290c <__retarget_lock_release_recursive>
 80031f6:	e7dd      	b.n	80031b4 <_fflush_r+0xc>

080031f8 <__swbuf_r>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	460e      	mov	r6, r1
 80031fc:	4614      	mov	r4, r2
 80031fe:	4605      	mov	r5, r0
 8003200:	b118      	cbz	r0, 800320a <__swbuf_r+0x12>
 8003202:	6a03      	ldr	r3, [r0, #32]
 8003204:	b90b      	cbnz	r3, 800320a <__swbuf_r+0x12>
 8003206:	f7ff fa7b 	bl	8002700 <__sinit>
 800320a:	69a3      	ldr	r3, [r4, #24]
 800320c:	60a3      	str	r3, [r4, #8]
 800320e:	89a3      	ldrh	r3, [r4, #12]
 8003210:	071a      	lsls	r2, r3, #28
 8003212:	d501      	bpl.n	8003218 <__swbuf_r+0x20>
 8003214:	6923      	ldr	r3, [r4, #16]
 8003216:	b943      	cbnz	r3, 800322a <__swbuf_r+0x32>
 8003218:	4621      	mov	r1, r4
 800321a:	4628      	mov	r0, r5
 800321c:	f000 f82a 	bl	8003274 <__swsetup_r>
 8003220:	b118      	cbz	r0, 800322a <__swbuf_r+0x32>
 8003222:	f04f 37ff 	mov.w	r7, #4294967295
 8003226:	4638      	mov	r0, r7
 8003228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	6922      	ldr	r2, [r4, #16]
 800322e:	1a98      	subs	r0, r3, r2
 8003230:	6963      	ldr	r3, [r4, #20]
 8003232:	b2f6      	uxtb	r6, r6
 8003234:	4283      	cmp	r3, r0
 8003236:	4637      	mov	r7, r6
 8003238:	dc05      	bgt.n	8003246 <__swbuf_r+0x4e>
 800323a:	4621      	mov	r1, r4
 800323c:	4628      	mov	r0, r5
 800323e:	f7ff ffb3 	bl	80031a8 <_fflush_r>
 8003242:	2800      	cmp	r0, #0
 8003244:	d1ed      	bne.n	8003222 <__swbuf_r+0x2a>
 8003246:	68a3      	ldr	r3, [r4, #8]
 8003248:	3b01      	subs	r3, #1
 800324a:	60a3      	str	r3, [r4, #8]
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	6022      	str	r2, [r4, #0]
 8003252:	701e      	strb	r6, [r3, #0]
 8003254:	6962      	ldr	r2, [r4, #20]
 8003256:	1c43      	adds	r3, r0, #1
 8003258:	429a      	cmp	r2, r3
 800325a:	d004      	beq.n	8003266 <__swbuf_r+0x6e>
 800325c:	89a3      	ldrh	r3, [r4, #12]
 800325e:	07db      	lsls	r3, r3, #31
 8003260:	d5e1      	bpl.n	8003226 <__swbuf_r+0x2e>
 8003262:	2e0a      	cmp	r6, #10
 8003264:	d1df      	bne.n	8003226 <__swbuf_r+0x2e>
 8003266:	4621      	mov	r1, r4
 8003268:	4628      	mov	r0, r5
 800326a:	f7ff ff9d 	bl	80031a8 <_fflush_r>
 800326e:	2800      	cmp	r0, #0
 8003270:	d0d9      	beq.n	8003226 <__swbuf_r+0x2e>
 8003272:	e7d6      	b.n	8003222 <__swbuf_r+0x2a>

08003274 <__swsetup_r>:
 8003274:	b538      	push	{r3, r4, r5, lr}
 8003276:	4b29      	ldr	r3, [pc, #164]	@ (800331c <__swsetup_r+0xa8>)
 8003278:	4605      	mov	r5, r0
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	460c      	mov	r4, r1
 800327e:	b118      	cbz	r0, 8003288 <__swsetup_r+0x14>
 8003280:	6a03      	ldr	r3, [r0, #32]
 8003282:	b90b      	cbnz	r3, 8003288 <__swsetup_r+0x14>
 8003284:	f7ff fa3c 	bl	8002700 <__sinit>
 8003288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800328c:	0719      	lsls	r1, r3, #28
 800328e:	d422      	bmi.n	80032d6 <__swsetup_r+0x62>
 8003290:	06da      	lsls	r2, r3, #27
 8003292:	d407      	bmi.n	80032a4 <__swsetup_r+0x30>
 8003294:	2209      	movs	r2, #9
 8003296:	602a      	str	r2, [r5, #0]
 8003298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800329c:	81a3      	strh	r3, [r4, #12]
 800329e:	f04f 30ff 	mov.w	r0, #4294967295
 80032a2:	e033      	b.n	800330c <__swsetup_r+0x98>
 80032a4:	0758      	lsls	r0, r3, #29
 80032a6:	d512      	bpl.n	80032ce <__swsetup_r+0x5a>
 80032a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032aa:	b141      	cbz	r1, 80032be <__swsetup_r+0x4a>
 80032ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032b0:	4299      	cmp	r1, r3
 80032b2:	d002      	beq.n	80032ba <__swsetup_r+0x46>
 80032b4:	4628      	mov	r0, r5
 80032b6:	f7ff fb2b 	bl	8002910 <_free_r>
 80032ba:	2300      	movs	r3, #0
 80032bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80032be:	89a3      	ldrh	r3, [r4, #12]
 80032c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80032c4:	81a3      	strh	r3, [r4, #12]
 80032c6:	2300      	movs	r3, #0
 80032c8:	6063      	str	r3, [r4, #4]
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	6023      	str	r3, [r4, #0]
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	f043 0308 	orr.w	r3, r3, #8
 80032d4:	81a3      	strh	r3, [r4, #12]
 80032d6:	6923      	ldr	r3, [r4, #16]
 80032d8:	b94b      	cbnz	r3, 80032ee <__swsetup_r+0x7a>
 80032da:	89a3      	ldrh	r3, [r4, #12]
 80032dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032e4:	d003      	beq.n	80032ee <__swsetup_r+0x7a>
 80032e6:	4621      	mov	r1, r4
 80032e8:	4628      	mov	r0, r5
 80032ea:	f000 f84f 	bl	800338c <__smakebuf_r>
 80032ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032f2:	f013 0201 	ands.w	r2, r3, #1
 80032f6:	d00a      	beq.n	800330e <__swsetup_r+0x9a>
 80032f8:	2200      	movs	r2, #0
 80032fa:	60a2      	str	r2, [r4, #8]
 80032fc:	6962      	ldr	r2, [r4, #20]
 80032fe:	4252      	negs	r2, r2
 8003300:	61a2      	str	r2, [r4, #24]
 8003302:	6922      	ldr	r2, [r4, #16]
 8003304:	b942      	cbnz	r2, 8003318 <__swsetup_r+0xa4>
 8003306:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800330a:	d1c5      	bne.n	8003298 <__swsetup_r+0x24>
 800330c:	bd38      	pop	{r3, r4, r5, pc}
 800330e:	0799      	lsls	r1, r3, #30
 8003310:	bf58      	it	pl
 8003312:	6962      	ldrpl	r2, [r4, #20]
 8003314:	60a2      	str	r2, [r4, #8]
 8003316:	e7f4      	b.n	8003302 <__swsetup_r+0x8e>
 8003318:	2000      	movs	r0, #0
 800331a:	e7f7      	b.n	800330c <__swsetup_r+0x98>
 800331c:	20000018 	.word	0x20000018

08003320 <_sbrk_r>:
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4d06      	ldr	r5, [pc, #24]	@ (800333c <_sbrk_r+0x1c>)
 8003324:	2300      	movs	r3, #0
 8003326:	4604      	mov	r4, r0
 8003328:	4608      	mov	r0, r1
 800332a:	602b      	str	r3, [r5, #0]
 800332c:	f7fd fd50 	bl	8000dd0 <_sbrk>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d102      	bne.n	800333a <_sbrk_r+0x1a>
 8003334:	682b      	ldr	r3, [r5, #0]
 8003336:	b103      	cbz	r3, 800333a <_sbrk_r+0x1a>
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	bd38      	pop	{r3, r4, r5, pc}
 800333c:	20000324 	.word	0x20000324

08003340 <__swhatbuf_r>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	460c      	mov	r4, r1
 8003344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003348:	2900      	cmp	r1, #0
 800334a:	b096      	sub	sp, #88	@ 0x58
 800334c:	4615      	mov	r5, r2
 800334e:	461e      	mov	r6, r3
 8003350:	da0d      	bge.n	800336e <__swhatbuf_r+0x2e>
 8003352:	89a3      	ldrh	r3, [r4, #12]
 8003354:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	bf14      	ite	ne
 800335e:	2340      	movne	r3, #64	@ 0x40
 8003360:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003364:	2000      	movs	r0, #0
 8003366:	6031      	str	r1, [r6, #0]
 8003368:	602b      	str	r3, [r5, #0]
 800336a:	b016      	add	sp, #88	@ 0x58
 800336c:	bd70      	pop	{r4, r5, r6, pc}
 800336e:	466a      	mov	r2, sp
 8003370:	f000 f848 	bl	8003404 <_fstat_r>
 8003374:	2800      	cmp	r0, #0
 8003376:	dbec      	blt.n	8003352 <__swhatbuf_r+0x12>
 8003378:	9901      	ldr	r1, [sp, #4]
 800337a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800337e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003382:	4259      	negs	r1, r3
 8003384:	4159      	adcs	r1, r3
 8003386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800338a:	e7eb      	b.n	8003364 <__swhatbuf_r+0x24>

0800338c <__smakebuf_r>:
 800338c:	898b      	ldrh	r3, [r1, #12]
 800338e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003390:	079d      	lsls	r5, r3, #30
 8003392:	4606      	mov	r6, r0
 8003394:	460c      	mov	r4, r1
 8003396:	d507      	bpl.n	80033a8 <__smakebuf_r+0x1c>
 8003398:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	6123      	str	r3, [r4, #16]
 80033a0:	2301      	movs	r3, #1
 80033a2:	6163      	str	r3, [r4, #20]
 80033a4:	b003      	add	sp, #12
 80033a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a8:	ab01      	add	r3, sp, #4
 80033aa:	466a      	mov	r2, sp
 80033ac:	f7ff ffc8 	bl	8003340 <__swhatbuf_r>
 80033b0:	9f00      	ldr	r7, [sp, #0]
 80033b2:	4605      	mov	r5, r0
 80033b4:	4639      	mov	r1, r7
 80033b6:	4630      	mov	r0, r6
 80033b8:	f7ff fb16 	bl	80029e8 <_malloc_r>
 80033bc:	b948      	cbnz	r0, 80033d2 <__smakebuf_r+0x46>
 80033be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033c2:	059a      	lsls	r2, r3, #22
 80033c4:	d4ee      	bmi.n	80033a4 <__smakebuf_r+0x18>
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	f043 0302 	orr.w	r3, r3, #2
 80033ce:	81a3      	strh	r3, [r4, #12]
 80033d0:	e7e2      	b.n	8003398 <__smakebuf_r+0xc>
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	6020      	str	r0, [r4, #0]
 80033d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033da:	81a3      	strh	r3, [r4, #12]
 80033dc:	9b01      	ldr	r3, [sp, #4]
 80033de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80033e2:	b15b      	cbz	r3, 80033fc <__smakebuf_r+0x70>
 80033e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033e8:	4630      	mov	r0, r6
 80033ea:	f000 f81d 	bl	8003428 <_isatty_r>
 80033ee:	b128      	cbz	r0, 80033fc <__smakebuf_r+0x70>
 80033f0:	89a3      	ldrh	r3, [r4, #12]
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	81a3      	strh	r3, [r4, #12]
 80033fc:	89a3      	ldrh	r3, [r4, #12]
 80033fe:	431d      	orrs	r5, r3
 8003400:	81a5      	strh	r5, [r4, #12]
 8003402:	e7cf      	b.n	80033a4 <__smakebuf_r+0x18>

08003404 <_fstat_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4d07      	ldr	r5, [pc, #28]	@ (8003424 <_fstat_r+0x20>)
 8003408:	2300      	movs	r3, #0
 800340a:	4604      	mov	r4, r0
 800340c:	4608      	mov	r0, r1
 800340e:	4611      	mov	r1, r2
 8003410:	602b      	str	r3, [r5, #0]
 8003412:	f7fd fcb4 	bl	8000d7e <_fstat>
 8003416:	1c43      	adds	r3, r0, #1
 8003418:	d102      	bne.n	8003420 <_fstat_r+0x1c>
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	b103      	cbz	r3, 8003420 <_fstat_r+0x1c>
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	bd38      	pop	{r3, r4, r5, pc}
 8003422:	bf00      	nop
 8003424:	20000324 	.word	0x20000324

08003428 <_isatty_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4d06      	ldr	r5, [pc, #24]	@ (8003444 <_isatty_r+0x1c>)
 800342c:	2300      	movs	r3, #0
 800342e:	4604      	mov	r4, r0
 8003430:	4608      	mov	r0, r1
 8003432:	602b      	str	r3, [r5, #0]
 8003434:	f7fd fcb3 	bl	8000d9e <_isatty>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	d102      	bne.n	8003442 <_isatty_r+0x1a>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	b103      	cbz	r3, 8003442 <_isatty_r+0x1a>
 8003440:	6023      	str	r3, [r4, #0]
 8003442:	bd38      	pop	{r3, r4, r5, pc}
 8003444:	20000324 	.word	0x20000324

08003448 <_init>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	bf00      	nop
 800344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344e:	bc08      	pop	{r3}
 8003450:	469e      	mov	lr, r3
 8003452:	4770      	bx	lr

08003454 <_fini>:
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	bf00      	nop
 8003458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345a:	bc08      	pop	{r3}
 800345c:	469e      	mov	lr, r3
 800345e:	4770      	bx	lr
